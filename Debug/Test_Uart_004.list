
Test_Uart_004.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e74  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003f30  08003f30  00013f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb8  08003fb8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fb8  08003fb8  00013fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fc0  08003fc0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fc0  08003fc0  00013fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fc4  08003fc4  00013fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000001c  08003fe4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003fe4  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfd4  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d47  00000000  00000000  0002c018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  0002dd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  0002e640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a4d  00000000  00000000  0002ee78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4ca  00000000  00000000  000448c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000888a0  00000000  00000000  0004fd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d862f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001eb4  00000000  00000000  000d8680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003f18 	.word	0x08003f18

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	08003f18 	.word	0x08003f18

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	469b      	mov	fp, r3
 8000476:	d433      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000478:	465a      	mov	r2, fp
 800047a:	4653      	mov	r3, sl
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83a      	bhi.n	8000502 <__udivmoddi4+0xc2>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e078      	b.n	8000584 <__udivmoddi4+0x144>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e075      	b.n	800058a <__udivmoddi4+0x14a>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e028      	b.n	800050a <__udivmoddi4+0xca>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	2320      	movs	r3, #32
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	4652      	mov	r2, sl
 80004e8:	40da      	lsrs	r2, r3
 80004ea:	4641      	mov	r1, r8
 80004ec:	0013      	movs	r3, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	408a      	lsls	r2, r1
 80004f2:	0017      	movs	r7, r2
 80004f4:	4642      	mov	r2, r8
 80004f6:	431f      	orrs	r7, r3
 80004f8:	4653      	mov	r3, sl
 80004fa:	4093      	lsls	r3, r2
 80004fc:	001e      	movs	r6, r3
 80004fe:	42af      	cmp	r7, r5
 8000500:	d9c4      	bls.n	800048c <__udivmoddi4+0x4c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	4643      	mov	r3, r8
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0d9      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000510:	07fb      	lsls	r3, r7, #31
 8000512:	0872      	lsrs	r2, r6, #1
 8000514:	431a      	orrs	r2, r3
 8000516:	4646      	mov	r6, r8
 8000518:	087b      	lsrs	r3, r7, #1
 800051a:	e00e      	b.n	800053a <__udivmoddi4+0xfa>
 800051c:	42ab      	cmp	r3, r5
 800051e:	d101      	bne.n	8000524 <__udivmoddi4+0xe4>
 8000520:	42a2      	cmp	r2, r4
 8000522:	d80c      	bhi.n	800053e <__udivmoddi4+0xfe>
 8000524:	1aa4      	subs	r4, r4, r2
 8000526:	419d      	sbcs	r5, r3
 8000528:	2001      	movs	r0, #1
 800052a:	1924      	adds	r4, r4, r4
 800052c:	416d      	adcs	r5, r5
 800052e:	2100      	movs	r1, #0
 8000530:	3e01      	subs	r6, #1
 8000532:	1824      	adds	r4, r4, r0
 8000534:	414d      	adcs	r5, r1
 8000536:	2e00      	cmp	r6, #0
 8000538:	d006      	beq.n	8000548 <__udivmoddi4+0x108>
 800053a:	42ab      	cmp	r3, r5
 800053c:	d9ee      	bls.n	800051c <__udivmoddi4+0xdc>
 800053e:	3e01      	subs	r6, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2e00      	cmp	r6, #0
 8000546:	d1f8      	bne.n	800053a <__udivmoddi4+0xfa>
 8000548:	9800      	ldr	r0, [sp, #0]
 800054a:	9901      	ldr	r1, [sp, #4]
 800054c:	465b      	mov	r3, fp
 800054e:	1900      	adds	r0, r0, r4
 8000550:	4169      	adcs	r1, r5
 8000552:	2b00      	cmp	r3, #0
 8000554:	db24      	blt.n	80005a0 <__udivmoddi4+0x160>
 8000556:	002b      	movs	r3, r5
 8000558:	465a      	mov	r2, fp
 800055a:	4644      	mov	r4, r8
 800055c:	40d3      	lsrs	r3, r2
 800055e:	002a      	movs	r2, r5
 8000560:	40e2      	lsrs	r2, r4
 8000562:	001c      	movs	r4, r3
 8000564:	465b      	mov	r3, fp
 8000566:	0015      	movs	r5, r2
 8000568:	2b00      	cmp	r3, #0
 800056a:	db2a      	blt.n	80005c2 <__udivmoddi4+0x182>
 800056c:	0026      	movs	r6, r4
 800056e:	409e      	lsls	r6, r3
 8000570:	0033      	movs	r3, r6
 8000572:	0026      	movs	r6, r4
 8000574:	4647      	mov	r7, r8
 8000576:	40be      	lsls	r6, r7
 8000578:	0032      	movs	r2, r6
 800057a:	1a80      	subs	r0, r0, r2
 800057c:	4199      	sbcs	r1, r3
 800057e:	9000      	str	r0, [sp, #0]
 8000580:	9101      	str	r1, [sp, #4]
 8000582:	e79f      	b.n	80004c4 <__udivmoddi4+0x84>
 8000584:	42a3      	cmp	r3, r4
 8000586:	d8bc      	bhi.n	8000502 <__udivmoddi4+0xc2>
 8000588:	e783      	b.n	8000492 <__udivmoddi4+0x52>
 800058a:	4642      	mov	r2, r8
 800058c:	2320      	movs	r3, #32
 800058e:	2100      	movs	r1, #0
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	2200      	movs	r2, #0
 8000594:	9100      	str	r1, [sp, #0]
 8000596:	9201      	str	r2, [sp, #4]
 8000598:	2201      	movs	r2, #1
 800059a:	40da      	lsrs	r2, r3
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	e786      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	4646      	mov	r6, r8
 80005aa:	409a      	lsls	r2, r3
 80005ac:	0023      	movs	r3, r4
 80005ae:	40f3      	lsrs	r3, r6
 80005b0:	4644      	mov	r4, r8
 80005b2:	4313      	orrs	r3, r2
 80005b4:	002a      	movs	r2, r5
 80005b6:	40e2      	lsrs	r2, r4
 80005b8:	001c      	movs	r4, r3
 80005ba:	465b      	mov	r3, fp
 80005bc:	0015      	movs	r5, r2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dad4      	bge.n	800056c <__udivmoddi4+0x12c>
 80005c2:	4642      	mov	r2, r8
 80005c4:	002f      	movs	r7, r5
 80005c6:	2320      	movs	r3, #32
 80005c8:	0026      	movs	r6, r4
 80005ca:	4097      	lsls	r7, r2
 80005cc:	1a9b      	subs	r3, r3, r2
 80005ce:	40de      	lsrs	r6, r3
 80005d0:	003b      	movs	r3, r7
 80005d2:	4333      	orrs	r3, r6
 80005d4:	e7cd      	b.n	8000572 <__udivmoddi4+0x132>
 80005d6:	46c0      	nop			; (mov r8, r8)

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fb12 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f83c 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 f922 	bl	8000880 <MX_GPIO_Init>
  MX_DMA_Init();
 800063c:	f000 f902 	bl	8000844 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000640:	f000 f8cc 	bl	80007dc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000644:	f000 f87c 	bl	8000740 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_status = HAL_UART_Transmit ( &huart1 , (const uint8_t *) hello , strlen ( hello ) , UART_TX_TIMEOUT ) ;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <main+0x70>)
 800064a:	0018      	movs	r0, r3
 800064c:	f7ff fd5a 	bl	8000104 <strlen>
 8000650:	0003      	movs	r3, r0
 8000652:	b29a      	uxth	r2, r3
 8000654:	4911      	ldr	r1, [pc, #68]	; (800069c <main+0x70>)
 8000656:	4812      	ldr	r0, [pc, #72]	; (80006a0 <main+0x74>)
 8000658:	2364      	movs	r3, #100	; 0x64
 800065a:	f001 ffe7 	bl	800262c <HAL_UART_Transmit>
 800065e:	0003      	movs	r3, r0
 8000660:	001a      	movs	r2, r3
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <main+0x78>)
 8000664:	701a      	strb	r2, [r3, #0]
  uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) hello , strlen ( hello ) , UART_TX_TIMEOUT ) ;
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <main+0x70>)
 8000668:	0018      	movs	r0, r3
 800066a:	f7ff fd4b 	bl	8000104 <strlen>
 800066e:	0003      	movs	r3, r0
 8000670:	b29a      	uxth	r2, r3
 8000672:	490a      	ldr	r1, [pc, #40]	; (800069c <main+0x70>)
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <main+0x7c>)
 8000676:	2364      	movs	r3, #100	; 0x64
 8000678:	f001 ffd8 	bl	800262c <HAL_UART_Transmit>
 800067c:	0003      	movs	r3, r0
 800067e:	001a      	movs	r2, r3
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <main+0x78>)
 8000682:	701a      	strb	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 8000684:	4909      	ldr	r1, [pc, #36]	; (80006ac <main+0x80>)
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <main+0x74>)
 8000688:	2205      	movs	r2, #5
 800068a:	0018      	movs	r0, r3
 800068c:	f003 fb52 	bl	8003d34 <HAL_UARTEx_ReceiveToIdle_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_Delay ( 1000 ) ;
 8000690:	23fa      	movs	r3, #250	; 0xfa
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	0018      	movs	r0, r3
 8000696:	f000 fb65 	bl	8000d64 <HAL_Delay>
 800069a:	e7f9      	b.n	8000690 <main+0x64>
 800069c:	20000000 	.word	0x20000000
 80006a0:	20000038 	.word	0x20000038
 80006a4:	200001bc 	.word	0x200001bc
 80006a8:	200000cc 	.word	0x200000cc
 80006ac:	200001c0 	.word	0x200001c0

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b093      	sub	sp, #76	; 0x4c
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	2410      	movs	r4, #16
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	0018      	movs	r0, r3
 80006bc:	2338      	movs	r3, #56	; 0x38
 80006be:	001a      	movs	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f003 fc21 	bl	8003f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c6:	003b      	movs	r3, r7
 80006c8:	0018      	movs	r0, r3
 80006ca:	2310      	movs	r3, #16
 80006cc:	001a      	movs	r2, r3
 80006ce:	2100      	movs	r1, #0
 80006d0:	f003 fc1a 	bl	8003f08 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	0018      	movs	r0, r3
 80006da:	f001 f8c7 	bl	800186c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2202      	movs	r2, #2
 80006e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	0052      	lsls	r2, r2, #1
 80006ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2240      	movs	r2, #64	; 0x40
 80006f6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	0018      	movs	r0, r3
 8000702:	f001 f8ff 	bl	8001904 <HAL_RCC_OscConfig>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800070a:	f000 f94b 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	003b      	movs	r3, r7
 8000710:	2207      	movs	r2, #7
 8000712:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000714:	003b      	movs	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	003b      	movs	r3, r7
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000720:	003b      	movs	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000726:	003b      	movs	r3, r7
 8000728:	2100      	movs	r1, #0
 800072a:	0018      	movs	r0, r3
 800072c:	f001 fc04 	bl	8001f38 <HAL_RCC_ClockConfig>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000734:	f000 f936 	bl	80009a4 <Error_Handler>
  }
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b013      	add	sp, #76	; 0x4c
 800073e:	bd90      	pop	{r4, r7, pc}

08000740 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <MX_USART1_UART_Init+0x94>)
 8000746:	4a24      	ldr	r2, [pc, #144]	; (80007d8 <MX_USART1_UART_Init+0x98>)
 8000748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <MX_USART1_UART_Init+0x94>)
 800074c:	22e1      	movs	r2, #225	; 0xe1
 800074e:	0252      	lsls	r2, r2, #9
 8000750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <MX_USART1_UART_Init+0x94>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_USART1_UART_Init+0x94>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_USART1_UART_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_USART1_UART_Init+0x94>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_USART1_UART_Init+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_USART1_UART_Init+0x94>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_USART1_UART_Init+0x94>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_USART1_UART_Init+0x94>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_USART1_UART_Init+0x94>)
 8000784:	2200      	movs	r2, #0
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_USART1_UART_Init+0x94>)
 800078a:	0018      	movs	r0, r3
 800078c:	f001 fef8 	bl	8002580 <HAL_UART_Init>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000794:	f000 f906 	bl	80009a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART1_UART_Init+0x94>)
 800079a:	2100      	movs	r1, #0
 800079c:	0018      	movs	r0, r3
 800079e:	f003 fa47 	bl	8003c30 <HAL_UARTEx_SetTxFifoThreshold>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007a6:	f000 f8fd 	bl	80009a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_USART1_UART_Init+0x94>)
 80007ac:	2100      	movs	r1, #0
 80007ae:	0018      	movs	r0, r3
 80007b0:	f003 fa7e 	bl	8003cb0 <HAL_UARTEx_SetRxFifoThreshold>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007b8:	f000 f8f4 	bl	80009a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <MX_USART1_UART_Init+0x94>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f003 f9fc 	bl	8003bbc <HAL_UARTEx_DisableFifoMode>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007c8:	f000 f8ec 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	20000038 	.word	0x20000038
 80007d8:	40013800 	.word	0x40013800

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_USART2_UART_Init+0x60>)
 80007e2:	4a17      	ldr	r2, [pc, #92]	; (8000840 <MX_USART2_UART_Init+0x64>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_USART2_UART_Init+0x60>)
 80007e8:	22e1      	movs	r2, #225	; 0xe1
 80007ea:	0252      	lsls	r2, r2, #9
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_USART2_UART_Init+0x60>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USART2_UART_Init+0x60>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_USART2_UART_Init+0x60>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USART2_UART_Init+0x60>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <MX_USART2_UART_Init+0x60>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USART2_UART_Init+0x60>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MX_USART2_UART_Init+0x60>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USART2_UART_Init+0x60>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081e:	4b07      	ldr	r3, [pc, #28]	; (800083c <MX_USART2_UART_Init+0x60>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <MX_USART2_UART_Init+0x60>)
 8000826:	0018      	movs	r0, r3
 8000828:	f001 feaa 	bl	8002580 <HAL_UART_Init>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d001      	beq.n	8000834 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000830:	f000 f8b8 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	200000cc 	.word	0x200000cc
 8000840:	40004400 	.word	0x40004400

08000844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_DMA_Init+0x38>)
 800084c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_DMA_Init+0x38>)
 8000850:	2101      	movs	r1, #1
 8000852:	430a      	orrs	r2, r1
 8000854:	639a      	str	r2, [r3, #56]	; 0x38
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_DMA_Init+0x38>)
 8000858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800085a:	2201      	movs	r2, #1
 800085c:	4013      	ands	r3, r2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	2009      	movs	r0, #9
 8000868:	f000 fb4c 	bl	8000f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800086c:	2009      	movs	r0, #9
 800086e:	f000 fb5e 	bl	8000f2e <HAL_NVIC_EnableIRQ>

}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b002      	add	sp, #8
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	40021000 	.word	0x40021000

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_GPIO_Init+0x28>)
 8000888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_GPIO_Init+0x28>)
 800088c:	2101      	movs	r1, #1
 800088e:	430a      	orrs	r2, r1
 8000890:	635a      	str	r2, [r3, #52]	; 0x34
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <MX_GPIO_Init+0x28>)
 8000894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000896:	2201      	movs	r2, #1
 8000898:	4013      	ands	r3, r2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	000a      	movs	r2, r1
 80008b6:	1cbb      	adds	r3, r7, #2
 80008b8:	801a      	strh	r2, [r3, #0]
    if ( huart->Instance == USART1 ) ;
    if ( rx_buff[0] != 0 )
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <HAL_UARTEx_RxEventCallback+0x5c>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d008      	beq.n	80008d4 <HAL_UARTEx_RxEventCallback+0x28>
    {
        cpy_cln_buff ( rx_buff , tx_buff ) ;
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <HAL_UARTEx_RxEventCallback+0x60>)
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_UARTEx_RxEventCallback+0x5c>)
 80008c6:	0011      	movs	r1, r2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 f825 	bl	8000918 <cpy_cln_buff>
        rx_buff[0] = 0 ;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_UARTEx_RxEventCallback+0x5c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
    }
    uart_status = HAL_UART_Transmit ( &huart1 , (const uint8_t *) tx_buff ,  strlen ( (char*) tx_buff ) , UART_TX_TIMEOUT ) ;
 80008d4:	4b0d      	ldr	r3, [pc, #52]	; (800090c <HAL_UARTEx_RxEventCallback+0x60>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff fc14 	bl	8000104 <strlen>
 80008dc:	0003      	movs	r3, r0
 80008de:	b29a      	uxth	r2, r3
 80008e0:	490a      	ldr	r1, [pc, #40]	; (800090c <HAL_UARTEx_RxEventCallback+0x60>)
 80008e2:	480b      	ldr	r0, [pc, #44]	; (8000910 <HAL_UARTEx_RxEventCallback+0x64>)
 80008e4:	2364      	movs	r3, #100	; 0x64
 80008e6:	f001 fea1 	bl	800262c <HAL_UART_Transmit>
 80008ea:	0003      	movs	r3, r0
 80008ec:	001a      	movs	r2, r3
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_UARTEx_RxEventCallback+0x68>)
 80008f0:	701a      	strb	r2, [r3, #0]

    HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 80008f2:	4905      	ldr	r1, [pc, #20]	; (8000908 <HAL_UARTEx_RxEventCallback+0x5c>)
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_UARTEx_RxEventCallback+0x64>)
 80008f6:	2205      	movs	r2, #5
 80008f8:	0018      	movs	r0, r3
 80008fa:	f003 fa1b 	bl	8003d34 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b002      	add	sp, #8
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	200001c0 	.word	0x200001c0
 800090c:	20000008 	.word	0x20000008
 8000910:	20000038 	.word	0x20000038
 8000914:	200001bc 	.word	0x200001bc

08000918 <cpy_cln_buff>:
void cpy_cln_buff ( uint8_t* s , uint8_t* d )
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
    uint8_t i = 0 ;
 8000922:	210f      	movs	r1, #15
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
    if ( sizeof ( s ) == sizeof ( d ) )
    {
        for ( i = 0 ; i < RX_BUFF_SIZE ; i++ )
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	e02e      	b.n	8000990 <cpy_cln_buff+0x78>
        {
            switch ( i )
 8000932:	230f      	movs	r3, #15
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b03      	cmp	r3, #3
 800093a:	d002      	beq.n	8000942 <cpy_cln_buff+0x2a>
 800093c:	2b04      	cmp	r3, #4
 800093e:	d008      	beq.n	8000952 <cpy_cln_buff+0x3a>
 8000940:	e00f      	b.n	8000962 <cpy_cln_buff+0x4a>
            {
                case ( RX_BUFF_SIZE - 2 ) :
                    d[i] = 0x0A ;
 8000942:	230f      	movs	r3, #15
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	18d3      	adds	r3, r2, r3
 800094c:	220a      	movs	r2, #10
 800094e:	701a      	strb	r2, [r3, #0]
                    break;
 8000950:	e012      	b.n	8000978 <cpy_cln_buff+0x60>
                case ( RX_BUFF_SIZE - 1 ) :
                    d[i] = 0 ;
 8000952:	230f      	movs	r3, #15
 8000954:	18fb      	adds	r3, r7, r3
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	18d3      	adds	r3, r2, r3
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
                    break;
 8000960:	e00a      	b.n	8000978 <cpy_cln_buff+0x60>
                default :
                    d[i] = s[i] ;
 8000962:	210f      	movs	r1, #15
 8000964:	187b      	adds	r3, r7, r1
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	18d2      	adds	r2, r2, r3
 800096c:	187b      	adds	r3, r7, r1
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	6839      	ldr	r1, [r7, #0]
 8000972:	18cb      	adds	r3, r1, r3
 8000974:	7812      	ldrb	r2, [r2, #0]
 8000976:	701a      	strb	r2, [r3, #0]
            }
            s[i] = 0 ;
 8000978:	210f      	movs	r1, #15
 800097a:	187b      	adds	r3, r7, r1
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	18d3      	adds	r3, r2, r3
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
        for ( i = 0 ; i < RX_BUFF_SIZE ; i++ )
 8000986:	187b      	adds	r3, r7, r1
 8000988:	781a      	ldrb	r2, [r3, #0]
 800098a:	187b      	adds	r3, r7, r1
 800098c:	3201      	adds	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	230f      	movs	r3, #15
 8000992:	18fb      	adds	r3, r7, r3
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b04      	cmp	r3, #4
 8000998:	d9cb      	bls.n	8000932 <cpy_cln_buff+0x1a>
        }
    }
}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	b004      	add	sp, #16
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_MspInit+0x44>)
 80009b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_MspInit+0x44>)
 80009bc:	2101      	movs	r1, #1
 80009be:	430a      	orrs	r2, r1
 80009c0:	641a      	str	r2, [r3, #64]	; 0x40
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_MspInit+0x44>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	2201      	movs	r2, #1
 80009c8:	4013      	ands	r3, r2
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_MspInit+0x44>)
 80009d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_MspInit+0x44>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	0549      	lsls	r1, r1, #21
 80009d8:	430a      	orrs	r2, r1
 80009da:	63da      	str	r2, [r3, #60]	; 0x3c
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_MspInit+0x44>)
 80009de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	055b      	lsls	r3, r3, #21
 80009e4:	4013      	ands	r3, r2
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b002      	add	sp, #8
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	40021000 	.word	0x40021000

080009f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b097      	sub	sp, #92	; 0x5c
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	2344      	movs	r3, #68	; 0x44
 8000a02:	18fb      	adds	r3, r7, r3
 8000a04:	0018      	movs	r0, r3
 8000a06:	2314      	movs	r3, #20
 8000a08:	001a      	movs	r2, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f003 fa7c 	bl	8003f08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a10:	241c      	movs	r4, #28
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	0018      	movs	r0, r3
 8000a16:	2328      	movs	r3, #40	; 0x28
 8000a18:	001a      	movs	r2, r3
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f003 fa74 	bl	8003f08 <memset>
  if(huart->Instance==USART1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a57      	ldr	r2, [pc, #348]	; (8000b84 <HAL_UART_MspInit+0x18c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d172      	bne.n	8000b10 <HAL_UART_MspInit+0x118>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f001 fc27 	bl	800228c <HAL_RCCEx_PeriphCLKConfig>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a42:	f7ff ffaf 	bl	80009a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a46:	4b50      	ldr	r3, [pc, #320]	; (8000b88 <HAL_UART_MspInit+0x190>)
 8000a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a4a:	4b4f      	ldr	r3, [pc, #316]	; (8000b88 <HAL_UART_MspInit+0x190>)
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	01c9      	lsls	r1, r1, #7
 8000a50:	430a      	orrs	r2, r1
 8000a52:	641a      	str	r2, [r3, #64]	; 0x40
 8000a54:	4b4c      	ldr	r3, [pc, #304]	; (8000b88 <HAL_UART_MspInit+0x190>)
 8000a56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	01db      	lsls	r3, r3, #7
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
 8000a60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b49      	ldr	r3, [pc, #292]	; (8000b88 <HAL_UART_MspInit+0x190>)
 8000a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a66:	4b48      	ldr	r3, [pc, #288]	; (8000b88 <HAL_UART_MspInit+0x190>)
 8000a68:	2101      	movs	r1, #1
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a6e:	4b46      	ldr	r3, [pc, #280]	; (8000b88 <HAL_UART_MspInit+0x190>)
 8000a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a72:	2201      	movs	r2, #1
 8000a74:	4013      	ands	r3, r2
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a7a:	2144      	movs	r1, #68	; 0x44
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	22c0      	movs	r2, #192	; 0xc0
 8000a80:	00d2      	lsls	r2, r2, #3
 8000a82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2202      	movs	r2, #2
 8000a88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2201      	movs	r2, #1
 8000a9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	187a      	adds	r2, r7, r1
 8000a9e:	23a0      	movs	r3, #160	; 0xa0
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 fd7d 	bl	80015a4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000aaa:	4b38      	ldr	r3, [pc, #224]	; (8000b8c <HAL_UART_MspInit+0x194>)
 8000aac:	4a38      	ldr	r2, [pc, #224]	; (8000b90 <HAL_UART_MspInit+0x198>)
 8000aae:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000ab0:	4b36      	ldr	r3, [pc, #216]	; (8000b8c <HAL_UART_MspInit+0x194>)
 8000ab2:	2232      	movs	r2, #50	; 0x32
 8000ab4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ab6:	4b35      	ldr	r3, [pc, #212]	; (8000b8c <HAL_UART_MspInit+0x194>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000abc:	4b33      	ldr	r3, [pc, #204]	; (8000b8c <HAL_UART_MspInit+0x194>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ac2:	4b32      	ldr	r3, [pc, #200]	; (8000b8c <HAL_UART_MspInit+0x194>)
 8000ac4:	2280      	movs	r2, #128	; 0x80
 8000ac6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ac8:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <HAL_UART_MspInit+0x194>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ace:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <HAL_UART_MspInit+0x194>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ad4:	4b2d      	ldr	r3, [pc, #180]	; (8000b8c <HAL_UART_MspInit+0x194>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ada:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <HAL_UART_MspInit+0x194>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <HAL_UART_MspInit+0x194>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 fa40 	bl	8000f68 <HAL_DMA_Init>
 8000ae8:	1e03      	subs	r3, r0, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8000aec:	f7ff ff5a 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	4a25      	ldr	r2, [pc, #148]	; (8000b8c <HAL_UART_MspInit+0x194>)
 8000af6:	505a      	str	r2, [r3, r1]
 8000af8:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <HAL_UART_MspInit+0x194>)
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	201b      	movs	r0, #27
 8000b04:	f000 f9fe 	bl	8000f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b08:	201b      	movs	r0, #27
 8000b0a:	f000 fa10 	bl	8000f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b0e:	e035      	b.n	8000b7c <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <HAL_UART_MspInit+0x19c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d130      	bne.n	8000b7c <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_UART_MspInit+0x190>)
 8000b1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <HAL_UART_MspInit+0x190>)
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	0289      	lsls	r1, r1, #10
 8000b24:	430a      	orrs	r2, r1
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_UART_MspInit+0x190>)
 8000b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	029b      	lsls	r3, r3, #10
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <HAL_UART_MspInit+0x190>)
 8000b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <HAL_UART_MspInit+0x190>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	635a      	str	r2, [r3, #52]	; 0x34
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_UART_MspInit+0x190>)
 8000b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b4e:	2144      	movs	r1, #68	; 0x44
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2202      	movs	r2, #2
 8000b5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	187a      	adds	r2, r7, r1
 8000b70:	23a0      	movs	r3, #160	; 0xa0
 8000b72:	05db      	lsls	r3, r3, #23
 8000b74:	0011      	movs	r1, r2
 8000b76:	0018      	movs	r0, r3
 8000b78:	f000 fd14 	bl	80015a4 <HAL_GPIO_Init>
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b017      	add	sp, #92	; 0x5c
 8000b82:	bd90      	pop	{r4, r7, pc}
 8000b84:	40013800 	.word	0x40013800
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	20000160 	.word	0x20000160
 8000b90:	40020008 	.word	0x40020008
 8000b94:	40004400 	.word	0x40004400

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 f8b6 	bl	8000d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <DMA1_Channel1_IRQHandler+0x14>)
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f000 fba6 	bl	8001320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	20000160 	.word	0x20000160

08000be0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <USART1_IRQHandler+0x14>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f001 fdbc 	bl	8002764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	20000038 	.word	0x20000038

08000bf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c08:	f7ff fff6 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0e:	490d      	ldr	r1, [pc, #52]	; (8000c44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <LoopForever+0xe>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c24:	4c0a      	ldr	r4, [pc, #40]	; (8000c50 <LoopForever+0x16>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c32:	f003 f945 	bl	8003ec0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c36:	f7ff fcf9 	bl	800062c <main>

08000c3a <LoopForever>:

LoopForever:
  b LoopForever
 8000c3a:	e7fe      	b.n	8000c3a <LoopForever>
  ldr   r0, =_estack
 8000c3c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c48:	08003fc8 	.word	0x08003fc8
  ldr r2, =_sbss
 8000c4c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c50:	200001cc 	.word	0x200001cc

08000c54 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC1_IRQHandler>
	...

08000c58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_Init+0x3c>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <HAL_Init+0x3c>)
 8000c6a:	2180      	movs	r1, #128	; 0x80
 8000c6c:	0049      	lsls	r1, r1, #1
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c72:	2003      	movs	r0, #3
 8000c74:	f000 f810 	bl	8000c98 <HAL_InitTick>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d003      	beq.n	8000c84 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c7c:	1dfb      	adds	r3, r7, #7
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	e001      	b.n	8000c88 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c84:	f7ff fe94 	bl	80009b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c88:	1dfb      	adds	r3, r7, #7
 8000c8a:	781b      	ldrb	r3, [r3, #0]
}
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b002      	add	sp, #8
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40022000 	.word	0x40022000

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <HAL_InitTick+0x88>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d02b      	beq.n	8000d08 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <HAL_InitTick+0x8c>)
 8000cb2:	681c      	ldr	r4, [r3, #0]
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <HAL_InitTick+0x88>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	0019      	movs	r1, r3
 8000cba:	23fa      	movs	r3, #250	; 0xfa
 8000cbc:	0098      	lsls	r0, r3, #2
 8000cbe:	f7ff fa29 	bl	8000114 <__udivsi3>
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	0019      	movs	r1, r3
 8000cc6:	0020      	movs	r0, r4
 8000cc8:	f7ff fa24 	bl	8000114 <__udivsi3>
 8000ccc:	0003      	movs	r3, r0
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f000 f93d 	bl	8000f4e <HAL_SYSTICK_Config>
 8000cd4:	1e03      	subs	r3, r0, #0
 8000cd6:	d112      	bne.n	8000cfe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b03      	cmp	r3, #3
 8000cdc:	d80a      	bhi.n	8000cf4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f000 f90c 	bl	8000f04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_InitTick+0x90>)
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	e00d      	b.n	8000d10 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	e008      	b.n	8000d10 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cfe:	230f      	movs	r3, #15
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	e003      	b.n	8000d10 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d08:	230f      	movs	r3, #15
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d10:	230f      	movs	r3, #15
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	781b      	ldrb	r3, [r3, #0]
}
 8000d16:	0018      	movs	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b005      	add	sp, #20
 8000d1c:	bd90      	pop	{r4, r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	20000018 	.word	0x20000018
 8000d24:	20000010 	.word	0x20000010
 8000d28:	20000014 	.word	0x20000014

08000d2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <HAL_IncTick+0x1c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	001a      	movs	r2, r3
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <HAL_IncTick+0x20>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	18d2      	adds	r2, r2, r3
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_IncTick+0x20>)
 8000d3e:	601a      	str	r2, [r3, #0]
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	20000018 	.word	0x20000018
 8000d4c:	200001c8 	.word	0x200001c8

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b02      	ldr	r3, [pc, #8]	; (8000d60 <HAL_GetTick+0x10>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	200001c8 	.word	0x200001c8

08000d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d6c:	f7ff fff0 	bl	8000d50 <HAL_GetTick>
 8000d70:	0003      	movs	r3, r0
 8000d72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	d005      	beq.n	8000d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_Delay+0x44>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	001a      	movs	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	189b      	adds	r3, r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	f7ff ffe0 	bl	8000d50 <HAL_GetTick>
 8000d90:	0002      	movs	r2, r0
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d8f7      	bhi.n	8000d8c <HAL_Delay+0x28>
  {
  }
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b004      	add	sp, #16
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	20000018 	.word	0x20000018

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	0002      	movs	r2, r0
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8000dbe:	d809      	bhi.n	8000dd4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	231f      	movs	r3, #31
 8000dc8:	401a      	ands	r2, r3
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_EnableIRQ+0x30>)
 8000dcc:	2101      	movs	r1, #1
 8000dce:	4091      	lsls	r1, r2
 8000dd0:	000a      	movs	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b002      	add	sp, #8
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	0002      	movs	r2, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b7f      	cmp	r3, #127	; 0x7f
 8000df4:	d828      	bhi.n	8000e48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df6:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <__NVIC_SetPriority+0xd4>)
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	33c0      	adds	r3, #192	; 0xc0
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	589b      	ldr	r3, [r3, r2]
 8000e06:	1dfa      	adds	r2, r7, #7
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	400a      	ands	r2, r1
 8000e10:	00d2      	lsls	r2, r2, #3
 8000e12:	21ff      	movs	r1, #255	; 0xff
 8000e14:	4091      	lsls	r1, r2
 8000e16:	000a      	movs	r2, r1
 8000e18:	43d2      	mvns	r2, r2
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	019b      	lsls	r3, r3, #6
 8000e22:	22ff      	movs	r2, #255	; 0xff
 8000e24:	401a      	ands	r2, r3
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	4003      	ands	r3, r0
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e34:	481f      	ldr	r0, [pc, #124]	; (8000eb4 <__NVIC_SetPriority+0xd4>)
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	33c0      	adds	r3, #192	; 0xc0
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e46:	e031      	b.n	8000eac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e48:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <__NVIC_SetPriority+0xd8>)
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	0019      	movs	r1, r3
 8000e50:	230f      	movs	r3, #15
 8000e52:	400b      	ands	r3, r1
 8000e54:	3b08      	subs	r3, #8
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3306      	adds	r3, #6
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	18d3      	adds	r3, r2, r3
 8000e5e:	3304      	adds	r3, #4
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	1dfa      	adds	r2, r7, #7
 8000e64:	7812      	ldrb	r2, [r2, #0]
 8000e66:	0011      	movs	r1, r2
 8000e68:	2203      	movs	r2, #3
 8000e6a:	400a      	ands	r2, r1
 8000e6c:	00d2      	lsls	r2, r2, #3
 8000e6e:	21ff      	movs	r1, #255	; 0xff
 8000e70:	4091      	lsls	r1, r2
 8000e72:	000a      	movs	r2, r1
 8000e74:	43d2      	mvns	r2, r2
 8000e76:	401a      	ands	r2, r3
 8000e78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	019b      	lsls	r3, r3, #6
 8000e7e:	22ff      	movs	r2, #255	; 0xff
 8000e80:	401a      	ands	r2, r3
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	0018      	movs	r0, r3
 8000e88:	2303      	movs	r3, #3
 8000e8a:	4003      	ands	r3, r0
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <__NVIC_SetPriority+0xd8>)
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	001c      	movs	r4, r3
 8000e98:	230f      	movs	r3, #15
 8000e9a:	4023      	ands	r3, r4
 8000e9c:	3b08      	subs	r3, #8
 8000e9e:	089b      	lsrs	r3, r3, #2
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	3306      	adds	r3, #6
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	18c3      	adds	r3, r0, r3
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b003      	add	sp, #12
 8000eb2:	bd90      	pop	{r4, r7, pc}
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	1e5a      	subs	r2, r3, #1
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	045b      	lsls	r3, r3, #17
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d301      	bcc.n	8000ed4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e010      	b.n	8000ef6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <SysTick_Config+0x44>)
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	3a01      	subs	r2, #1
 8000eda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000edc:	2301      	movs	r3, #1
 8000ede:	425b      	negs	r3, r3
 8000ee0:	2103      	movs	r1, #3
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff ff7c 	bl	8000de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <SysTick_Config+0x44>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <SysTick_Config+0x44>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b002      	add	sp, #8
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	210f      	movs	r1, #15
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	1c02      	adds	r2, r0, #0
 8000f14:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	0011      	movs	r1, r2
 8000f20:	0018      	movs	r0, r3
 8000f22:	f7ff ff5d 	bl	8000de0 <__NVIC_SetPriority>
}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b004      	add	sp, #16
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	0002      	movs	r2, r0
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b25b      	sxtb	r3, r3
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff ff33 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f7ff ffaf 	bl	8000ebc <SysTick_Config>
 8000f5e:	0003      	movs	r3, r0
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b002      	add	sp, #8
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e077      	b.n	800106a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a3d      	ldr	r2, [pc, #244]	; (8001074 <HAL_DMA_Init+0x10c>)
 8000f80:	4694      	mov	ip, r2
 8000f82:	4463      	add	r3, ip
 8000f84:	2114      	movs	r1, #20
 8000f86:	0018      	movs	r0, r3
 8000f88:	f7ff f8c4 	bl	8000114 <__udivsi3>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	009a      	lsls	r2, r3, #2
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2225      	movs	r2, #37	; 0x25
 8000f98:	2102      	movs	r1, #2
 8000f9a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4934      	ldr	r1, [pc, #208]	; (8001078 <HAL_DMA_Init+0x110>)
 8000fa8:	400a      	ands	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6819      	ldr	r1, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f000 fa8d 	bl	8001504 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	01db      	lsls	r3, r3, #7
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d102      	bne.n	8000ffc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001004:	213f      	movs	r1, #63	; 0x3f
 8001006:	400a      	ands	r2, r1
 8001008:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001012:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d011      	beq.n	8001040 <HAL_DMA_Init+0xd8>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b04      	cmp	r3, #4
 8001022:	d80d      	bhi.n	8001040 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	0018      	movs	r0, r3
 8001028:	f000 fa98 	bl	800155c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	e008      	b.n	8001052 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2225      	movs	r2, #37	; 0x25
 800105c:	2101      	movs	r1, #1
 800105e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2224      	movs	r2, #36	; 0x24
 8001064:	2100      	movs	r1, #0
 8001066:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	0018      	movs	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	b002      	add	sp, #8
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	bffdfff8 	.word	0xbffdfff8
 8001078:	ffff800f 	.word	0xffff800f

0800107c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800108a:	2317      	movs	r3, #23
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2224      	movs	r2, #36	; 0x24
 8001096:	5c9b      	ldrb	r3, [r3, r2]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d101      	bne.n	80010a0 <HAL_DMA_Start_IT+0x24>
 800109c:	2302      	movs	r3, #2
 800109e:	e06f      	b.n	8001180 <HAL_DMA_Start_IT+0x104>
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2224      	movs	r2, #36	; 0x24
 80010a4:	2101      	movs	r1, #1
 80010a6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2225      	movs	r2, #37	; 0x25
 80010ac:	5c9b      	ldrb	r3, [r3, r2]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d157      	bne.n	8001164 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2225      	movs	r2, #37	; 0x25
 80010b8:	2102      	movs	r1, #2
 80010ba:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2101      	movs	r1, #1
 80010ce:	438a      	bics	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	68b9      	ldr	r1, [r7, #8]
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f000 f9d3 	bl	8001484 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d008      	beq.n	80010f8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	210e      	movs	r1, #14
 80010f2:	430a      	orrs	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e00f      	b.n	8001118 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2104      	movs	r1, #4
 8001104:	438a      	bics	r2, r1
 8001106:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	210a      	movs	r1, #10
 8001114:	430a      	orrs	r2, r1
 8001116:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	025b      	lsls	r3, r3, #9
 8001122:	4013      	ands	r3, r2
 8001124:	d008      	beq.n	8001138 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	0049      	lsls	r1, r1, #1
 8001134:	430a      	orrs	r2, r1
 8001136:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800113c:	2b00      	cmp	r3, #0
 800113e:	d008      	beq.n	8001152 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800114a:	2180      	movs	r1, #128	; 0x80
 800114c:	0049      	lsls	r1, r1, #1
 800114e:	430a      	orrs	r2, r1
 8001150:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2101      	movs	r1, #1
 800115e:	430a      	orrs	r2, r1
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	e00a      	b.n	800117a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2224      	movs	r2, #36	; 0x24
 800116e:	2100      	movs	r1, #0
 8001170:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001172:	2317      	movs	r3, #23
 8001174:	18fb      	adds	r3, r7, r3
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800117a:	2317      	movs	r3, #23
 800117c:	18fb      	adds	r3, r7, r3
 800117e:	781b      	ldrb	r3, [r3, #0]
}
 8001180:	0018      	movs	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	b006      	add	sp, #24
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e050      	b.n	800123c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2225      	movs	r2, #37	; 0x25
 800119e:	5c9b      	ldrb	r3, [r3, r2]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d008      	beq.n	80011b8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2204      	movs	r2, #4
 80011aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2224      	movs	r2, #36	; 0x24
 80011b0:	2100      	movs	r1, #0
 80011b2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e041      	b.n	800123c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	210e      	movs	r1, #14
 80011c4:	438a      	bics	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	491c      	ldr	r1, [pc, #112]	; (8001244 <HAL_DMA_Abort+0xbc>)
 80011d4:	400a      	ands	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2101      	movs	r1, #1
 80011e4:	438a      	bics	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_DMA_Abort+0xc0>)
 80011ea:	6859      	ldr	r1, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	221c      	movs	r2, #28
 80011f2:	4013      	ands	r3, r2
 80011f4:	2201      	movs	r2, #1
 80011f6:	409a      	lsls	r2, r3
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_DMA_Abort+0xc0>)
 80011fa:	430a      	orrs	r2, r1
 80011fc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001206:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00c      	beq.n	800122a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800121a:	490a      	ldr	r1, [pc, #40]	; (8001244 <HAL_DMA_Abort+0xbc>)
 800121c:	400a      	ands	r2, r1
 800121e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001228:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2225      	movs	r2, #37	; 0x25
 800122e:	2101      	movs	r1, #1
 8001230:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2224      	movs	r2, #36	; 0x24
 8001236:	2100      	movs	r1, #0
 8001238:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	b002      	add	sp, #8
 8001242:	bd80      	pop	{r7, pc}
 8001244:	fffffeff 	.word	0xfffffeff
 8001248:	40020000 	.word	0x40020000

0800124c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001254:	210f      	movs	r1, #15
 8001256:	187b      	adds	r3, r7, r1
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2225      	movs	r2, #37	; 0x25
 8001260:	5c9b      	ldrb	r3, [r3, r2]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d006      	beq.n	8001276 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2204      	movs	r2, #4
 800126c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800126e:	187b      	adds	r3, r7, r1
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	e049      	b.n	800130a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	210e      	movs	r1, #14
 8001282:	438a      	bics	r2, r1
 8001284:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	438a      	bics	r2, r1
 8001294:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a0:	491d      	ldr	r1, [pc, #116]	; (8001318 <HAL_DMA_Abort_IT+0xcc>)
 80012a2:	400a      	ands	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_DMA_Abort_IT+0xd0>)
 80012a8:	6859      	ldr	r1, [r3, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	221c      	movs	r2, #28
 80012b0:	4013      	ands	r3, r2
 80012b2:	2201      	movs	r2, #1
 80012b4:	409a      	lsls	r2, r3
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_DMA_Abort_IT+0xd0>)
 80012b8:	430a      	orrs	r2, r1
 80012ba:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80012c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00c      	beq.n	80012e8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012d8:	490f      	ldr	r1, [pc, #60]	; (8001318 <HAL_DMA_Abort_IT+0xcc>)
 80012da:	400a      	ands	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80012e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2225      	movs	r2, #37	; 0x25
 80012ec:	2101      	movs	r1, #1
 80012ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2224      	movs	r2, #36	; 0x24
 80012f4:	2100      	movs	r1, #0
 80012f6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d004      	beq.n	800130a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	0010      	movs	r0, r2
 8001308:	4798      	blx	r3
    }
  }
  return status;
 800130a:	230f      	movs	r3, #15
 800130c:	18fb      	adds	r3, r7, r3
 800130e:	781b      	ldrb	r3, [r3, #0]
}
 8001310:	0018      	movs	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	b004      	add	sp, #16
 8001316:	bd80      	pop	{r7, pc}
 8001318:	fffffeff 	.word	0xfffffeff
 800131c:	40020000 	.word	0x40020000

08001320 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001328:	4b55      	ldr	r3, [pc, #340]	; (8001480 <HAL_DMA_IRQHandler+0x160>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	221c      	movs	r2, #28
 800133c:	4013      	ands	r3, r2
 800133e:	2204      	movs	r2, #4
 8001340:	409a      	lsls	r2, r3
 8001342:	0013      	movs	r3, r2
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	4013      	ands	r3, r2
 8001348:	d027      	beq.n	800139a <HAL_DMA_IRQHandler+0x7a>
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	2204      	movs	r2, #4
 800134e:	4013      	ands	r3, r2
 8001350:	d023      	beq.n	800139a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2220      	movs	r2, #32
 800135a:	4013      	ands	r3, r2
 800135c:	d107      	bne.n	800136e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2104      	movs	r1, #4
 800136a:	438a      	bics	r2, r1
 800136c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800136e:	4b44      	ldr	r3, [pc, #272]	; (8001480 <HAL_DMA_IRQHandler+0x160>)
 8001370:	6859      	ldr	r1, [r3, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	221c      	movs	r2, #28
 8001378:	4013      	ands	r3, r2
 800137a:	2204      	movs	r2, #4
 800137c:	409a      	lsls	r2, r3
 800137e:	4b40      	ldr	r3, [pc, #256]	; (8001480 <HAL_DMA_IRQHandler+0x160>)
 8001380:	430a      	orrs	r2, r1
 8001382:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	2b00      	cmp	r3, #0
 800138a:	d100      	bne.n	800138e <HAL_DMA_IRQHandler+0x6e>
 800138c:	e073      	b.n	8001476 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	0010      	movs	r0, r2
 8001396:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001398:	e06d      	b.n	8001476 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	221c      	movs	r2, #28
 80013a0:	4013      	ands	r3, r2
 80013a2:	2202      	movs	r2, #2
 80013a4:	409a      	lsls	r2, r3
 80013a6:	0013      	movs	r3, r2
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	4013      	ands	r3, r2
 80013ac:	d02e      	beq.n	800140c <HAL_DMA_IRQHandler+0xec>
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	2202      	movs	r2, #2
 80013b2:	4013      	ands	r3, r2
 80013b4:	d02a      	beq.n	800140c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2220      	movs	r2, #32
 80013be:	4013      	ands	r3, r2
 80013c0:	d10b      	bne.n	80013da <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	210a      	movs	r1, #10
 80013ce:	438a      	bics	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2225      	movs	r2, #37	; 0x25
 80013d6:	2101      	movs	r1, #1
 80013d8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <HAL_DMA_IRQHandler+0x160>)
 80013dc:	6859      	ldr	r1, [r3, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	221c      	movs	r2, #28
 80013e4:	4013      	ands	r3, r2
 80013e6:	2202      	movs	r2, #2
 80013e8:	409a      	lsls	r2, r3
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <HAL_DMA_IRQHandler+0x160>)
 80013ec:	430a      	orrs	r2, r1
 80013ee:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2224      	movs	r2, #36	; 0x24
 80013f4:	2100      	movs	r1, #0
 80013f6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d03a      	beq.n	8001476 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	0010      	movs	r0, r2
 8001408:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800140a:	e034      	b.n	8001476 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	221c      	movs	r2, #28
 8001412:	4013      	ands	r3, r2
 8001414:	2208      	movs	r2, #8
 8001416:	409a      	lsls	r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	4013      	ands	r3, r2
 800141e:	d02b      	beq.n	8001478 <HAL_DMA_IRQHandler+0x158>
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	2208      	movs	r2, #8
 8001424:	4013      	ands	r3, r2
 8001426:	d027      	beq.n	8001478 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	210e      	movs	r1, #14
 8001434:	438a      	bics	r2, r1
 8001436:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_DMA_IRQHandler+0x160>)
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	221c      	movs	r2, #28
 8001442:	4013      	ands	r3, r2
 8001444:	2201      	movs	r2, #1
 8001446:	409a      	lsls	r2, r3
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_DMA_IRQHandler+0x160>)
 800144a:	430a      	orrs	r2, r1
 800144c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2225      	movs	r2, #37	; 0x25
 8001458:	2101      	movs	r1, #1
 800145a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2224      	movs	r2, #36	; 0x24
 8001460:	2100      	movs	r1, #0
 8001462:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	0010      	movs	r0, r2
 8001474:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46c0      	nop			; (mov r8, r8)
}
 800147a:	46bd      	mov	sp, r7
 800147c:	b004      	add	sp, #16
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40020000 	.word	0x40020000

08001484 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800149a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d004      	beq.n	80014ae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80014ac:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <DMA_SetConfig+0x7c>)
 80014b0:	6859      	ldr	r1, [r3, #4]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	221c      	movs	r2, #28
 80014b8:	4013      	ands	r3, r2
 80014ba:	2201      	movs	r2, #1
 80014bc:	409a      	lsls	r2, r3
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <DMA_SetConfig+0x7c>)
 80014c0:	430a      	orrs	r2, r1
 80014c2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b10      	cmp	r3, #16
 80014d2:	d108      	bne.n	80014e6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68ba      	ldr	r2, [r7, #8]
 80014e2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014e4:	e007      	b.n	80014f6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	60da      	str	r2, [r3, #12]
}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b004      	add	sp, #16
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	40020000 	.word	0x40020000

08001504 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	4a10      	ldr	r2, [pc, #64]	; (8001554 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001514:	4694      	mov	ip, r2
 8001516:	4463      	add	r3, ip
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	001a      	movs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	001a      	movs	r2, r3
 8001526:	23ff      	movs	r3, #255	; 0xff
 8001528:	4013      	ands	r3, r2
 800152a:	3b08      	subs	r3, #8
 800152c:	2114      	movs	r1, #20
 800152e:	0018      	movs	r0, r3
 8001530:	f7fe fdf0 	bl	8000114 <__udivsi3>
 8001534:	0003      	movs	r3, r0
 8001536:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a07      	ldr	r2, [pc, #28]	; (8001558 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800153c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	221f      	movs	r2, #31
 8001542:	4013      	ands	r3, r2
 8001544:	2201      	movs	r2, #1
 8001546:	409a      	lsls	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b004      	add	sp, #16
 8001552:	bd80      	pop	{r7, pc}
 8001554:	10008200 	.word	0x10008200
 8001558:	40020880 	.word	0x40020880

0800155c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	223f      	movs	r2, #63	; 0x3f
 800156a:	4013      	ands	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4a0a      	ldr	r2, [pc, #40]	; (800159c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001572:	4694      	mov	ip, r2
 8001574:	4463      	add	r3, ip
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	001a      	movs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001582:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3b01      	subs	r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	4013      	ands	r3, r2
 800158c:	2201      	movs	r2, #1
 800158e:	409a      	lsls	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001594:	46c0      	nop			; (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	b004      	add	sp, #16
 800159a:	bd80      	pop	{r7, pc}
 800159c:	1000823f 	.word	0x1000823f
 80015a0:	40020940 	.word	0x40020940

080015a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b2:	e147      	b.n	8001844 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2101      	movs	r1, #1
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	4091      	lsls	r1, r2
 80015be:	000a      	movs	r2, r1
 80015c0:	4013      	ands	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d100      	bne.n	80015cc <HAL_GPIO_Init+0x28>
 80015ca:	e138      	b.n	800183e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2203      	movs	r2, #3
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d005      	beq.n	80015e4 <HAL_GPIO_Init+0x40>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2203      	movs	r2, #3
 80015de:	4013      	ands	r3, r2
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d130      	bne.n	8001646 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	409a      	lsls	r2, r3
 80015f2:	0013      	movs	r3, r2
 80015f4:	43da      	mvns	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	409a      	lsls	r2, r3
 8001606:	0013      	movs	r3, r2
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800161a:	2201      	movs	r2, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	43da      	mvns	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	091b      	lsrs	r3, r3, #4
 8001630:	2201      	movs	r2, #1
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
 8001638:	0013      	movs	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2203      	movs	r2, #3
 800164c:	4013      	ands	r3, r2
 800164e:	2b03      	cmp	r3, #3
 8001650:	d017      	beq.n	8001682 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	2203      	movs	r2, #3
 800165e:	409a      	lsls	r2, r3
 8001660:	0013      	movs	r3, r2
 8001662:	43da      	mvns	r2, r3
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	409a      	lsls	r2, r3
 8001674:	0013      	movs	r3, r2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2203      	movs	r2, #3
 8001688:	4013      	ands	r3, r2
 800168a:	2b02      	cmp	r3, #2
 800168c:	d123      	bne.n	80016d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	08da      	lsrs	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3208      	adds	r2, #8
 8001696:	0092      	lsls	r2, r2, #2
 8001698:	58d3      	ldr	r3, [r2, r3]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2207      	movs	r2, #7
 80016a0:	4013      	ands	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	220f      	movs	r2, #15
 80016a6:	409a      	lsls	r2, r3
 80016a8:	0013      	movs	r3, r2
 80016aa:	43da      	mvns	r2, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	691a      	ldr	r2, [r3, #16]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2107      	movs	r1, #7
 80016ba:	400b      	ands	r3, r1
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	409a      	lsls	r2, r3
 80016c0:	0013      	movs	r3, r2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	08da      	lsrs	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3208      	adds	r2, #8
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	6939      	ldr	r1, [r7, #16]
 80016d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	2203      	movs	r2, #3
 80016e2:	409a      	lsls	r2, r3
 80016e4:	0013      	movs	r3, r2
 80016e6:	43da      	mvns	r2, r3
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2203      	movs	r2, #3
 80016f4:	401a      	ands	r2, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	409a      	lsls	r2, r3
 80016fc:	0013      	movs	r3, r2
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	23c0      	movs	r3, #192	; 0xc0
 8001710:	029b      	lsls	r3, r3, #10
 8001712:	4013      	ands	r3, r2
 8001714:	d100      	bne.n	8001718 <HAL_GPIO_Init+0x174>
 8001716:	e092      	b.n	800183e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001718:	4a50      	ldr	r2, [pc, #320]	; (800185c <HAL_GPIO_Init+0x2b8>)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	089b      	lsrs	r3, r3, #2
 800171e:	3318      	adds	r3, #24
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	589b      	ldr	r3, [r3, r2]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	2203      	movs	r2, #3
 800172a:	4013      	ands	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	220f      	movs	r2, #15
 8001730:	409a      	lsls	r2, r3
 8001732:	0013      	movs	r3, r2
 8001734:	43da      	mvns	r2, r3
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	23a0      	movs	r3, #160	; 0xa0
 8001740:	05db      	lsls	r3, r3, #23
 8001742:	429a      	cmp	r2, r3
 8001744:	d013      	beq.n	800176e <HAL_GPIO_Init+0x1ca>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a45      	ldr	r2, [pc, #276]	; (8001860 <HAL_GPIO_Init+0x2bc>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d00d      	beq.n	800176a <HAL_GPIO_Init+0x1c6>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a44      	ldr	r2, [pc, #272]	; (8001864 <HAL_GPIO_Init+0x2c0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d007      	beq.n	8001766 <HAL_GPIO_Init+0x1c2>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a43      	ldr	r2, [pc, #268]	; (8001868 <HAL_GPIO_Init+0x2c4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d101      	bne.n	8001762 <HAL_GPIO_Init+0x1be>
 800175e:	2303      	movs	r3, #3
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x1cc>
 8001762:	2305      	movs	r3, #5
 8001764:	e004      	b.n	8001770 <HAL_GPIO_Init+0x1cc>
 8001766:	2302      	movs	r3, #2
 8001768:	e002      	b.n	8001770 <HAL_GPIO_Init+0x1cc>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <HAL_GPIO_Init+0x1cc>
 800176e:	2300      	movs	r3, #0
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	2103      	movs	r1, #3
 8001774:	400a      	ands	r2, r1
 8001776:	00d2      	lsls	r2, r2, #3
 8001778:	4093      	lsls	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001780:	4936      	ldr	r1, [pc, #216]	; (800185c <HAL_GPIO_Init+0x2b8>)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3318      	adds	r3, #24
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800178e:	4b33      	ldr	r3, [pc, #204]	; (800185c <HAL_GPIO_Init+0x2b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43da      	mvns	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	035b      	lsls	r3, r3, #13
 80017a6:	4013      	ands	r3, r2
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <HAL_GPIO_Init+0x2b8>)
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80017b8:	4b28      	ldr	r3, [pc, #160]	; (800185c <HAL_GPIO_Init+0x2b8>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43da      	mvns	r2, r3
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	039b      	lsls	r3, r3, #14
 80017d0:	4013      	ands	r3, r2
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017dc:	4b1f      	ldr	r3, [pc, #124]	; (800185c <HAL_GPIO_Init+0x2b8>)
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017e2:	4a1e      	ldr	r2, [pc, #120]	; (800185c <HAL_GPIO_Init+0x2b8>)
 80017e4:	2384      	movs	r3, #132	; 0x84
 80017e6:	58d3      	ldr	r3, [r2, r3]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43da      	mvns	r2, r3
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	029b      	lsls	r3, r3, #10
 80017fc:	4013      	ands	r3, r2
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001808:	4914      	ldr	r1, [pc, #80]	; (800185c <HAL_GPIO_Init+0x2b8>)
 800180a:	2284      	movs	r2, #132	; 0x84
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001810:	4a12      	ldr	r2, [pc, #72]	; (800185c <HAL_GPIO_Init+0x2b8>)
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	58d3      	ldr	r3, [r2, r3]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	43da      	mvns	r2, r3
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	025b      	lsls	r3, r3, #9
 800182a:	4013      	ands	r3, r2
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001836:	4909      	ldr	r1, [pc, #36]	; (800185c <HAL_GPIO_Init+0x2b8>)
 8001838:	2280      	movs	r2, #128	; 0x80
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3301      	adds	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	40da      	lsrs	r2, r3
 800184c:	1e13      	subs	r3, r2, #0
 800184e:	d000      	beq.n	8001852 <HAL_GPIO_Init+0x2ae>
 8001850:	e6b0      	b.n	80015b4 <HAL_GPIO_Init+0x10>
  }
}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46c0      	nop			; (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	b006      	add	sp, #24
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021800 	.word	0x40021800
 8001860:	50000400 	.word	0x50000400
 8001864:	50000800 	.word	0x50000800
 8001868:	50000c00 	.word	0x50000c00

0800186c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800187a:	4013      	ands	r3, r2
 800187c:	0019      	movs	r1, r3
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	430a      	orrs	r2, r1
 8001884:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	429a      	cmp	r2, r3
 800188e:	d11f      	bne.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	0013      	movs	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	189b      	adds	r3, r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4912      	ldr	r1, [pc, #72]	; (80018e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800189e:	0018      	movs	r0, r3
 80018a0:	f7fe fc38 	bl	8000114 <__udivsi3>
 80018a4:	0003      	movs	r3, r0
 80018a6:	3301      	adds	r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018aa:	e008      	b.n	80018be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	e001      	b.n	80018be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e009      	b.n	80018d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	401a      	ands	r2, r3
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d0ed      	beq.n	80018ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b004      	add	sp, #16
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	40007000 	.word	0x40007000
 80018e0:	fffff9ff 	.word	0xfffff9ff
 80018e4:	20000010 	.word	0x20000010
 80018e8:	000f4240 	.word	0x000f4240

080018ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <LL_RCC_GetAPB1Prescaler+0x14>)
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	23e0      	movs	r3, #224	; 0xe0
 80018f6:	01db      	lsls	r3, r3, #7
 80018f8:	4013      	ands	r3, r2
}
 80018fa:	0018      	movs	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40021000 	.word	0x40021000

08001904 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e2fe      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2201      	movs	r2, #1
 800191c:	4013      	ands	r3, r2
 800191e:	d100      	bne.n	8001922 <HAL_RCC_OscConfig+0x1e>
 8001920:	e07c      	b.n	8001a1c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001922:	4bc3      	ldr	r3, [pc, #780]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2238      	movs	r2, #56	; 0x38
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800192c:	4bc0      	ldr	r3, [pc, #768]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	2203      	movs	r2, #3
 8001932:	4013      	ands	r3, r2
 8001934:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b10      	cmp	r3, #16
 800193a:	d102      	bne.n	8001942 <HAL_RCC_OscConfig+0x3e>
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d002      	beq.n	8001948 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	2b08      	cmp	r3, #8
 8001946:	d10b      	bne.n	8001960 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	4bb9      	ldr	r3, [pc, #740]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	029b      	lsls	r3, r3, #10
 8001950:	4013      	ands	r3, r2
 8001952:	d062      	beq.n	8001a1a <HAL_RCC_OscConfig+0x116>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d15e      	bne.n	8001a1a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e2d9      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	025b      	lsls	r3, r3, #9
 8001968:	429a      	cmp	r2, r3
 800196a:	d107      	bne.n	800197c <HAL_RCC_OscConfig+0x78>
 800196c:	4bb0      	ldr	r3, [pc, #704]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4baf      	ldr	r3, [pc, #700]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001972:	2180      	movs	r1, #128	; 0x80
 8001974:	0249      	lsls	r1, r1, #9
 8001976:	430a      	orrs	r2, r1
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	e020      	b.n	80019be <HAL_RCC_OscConfig+0xba>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	23a0      	movs	r3, #160	; 0xa0
 8001982:	02db      	lsls	r3, r3, #11
 8001984:	429a      	cmp	r2, r3
 8001986:	d10e      	bne.n	80019a6 <HAL_RCC_OscConfig+0xa2>
 8001988:	4ba9      	ldr	r3, [pc, #676]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4ba8      	ldr	r3, [pc, #672]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 800198e:	2180      	movs	r1, #128	; 0x80
 8001990:	02c9      	lsls	r1, r1, #11
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	4ba6      	ldr	r3, [pc, #664]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4ba5      	ldr	r3, [pc, #660]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	0249      	lsls	r1, r1, #9
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e00b      	b.n	80019be <HAL_RCC_OscConfig+0xba>
 80019a6:	4ba2      	ldr	r3, [pc, #648]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4ba1      	ldr	r3, [pc, #644]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 80019ac:	49a1      	ldr	r1, [pc, #644]	; (8001c34 <HAL_RCC_OscConfig+0x330>)
 80019ae:	400a      	ands	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	4b9f      	ldr	r3, [pc, #636]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4b9e      	ldr	r3, [pc, #632]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 80019b8:	499f      	ldr	r1, [pc, #636]	; (8001c38 <HAL_RCC_OscConfig+0x334>)
 80019ba:	400a      	ands	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d014      	beq.n	80019f0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7ff f9c3 	bl	8000d50 <HAL_GetTick>
 80019ca:	0003      	movs	r3, r0
 80019cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff f9be 	bl	8000d50 <HAL_GetTick>
 80019d4:	0002      	movs	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e298      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e2:	4b93      	ldr	r3, [pc, #588]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	029b      	lsls	r3, r3, #10
 80019ea:	4013      	ands	r3, r2
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0xcc>
 80019ee:	e015      	b.n	8001a1c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff f9ae 	bl	8000d50 <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fa:	f7ff f9a9 	bl	8000d50 <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b64      	cmp	r3, #100	; 0x64
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e283      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a0c:	4b88      	ldr	r3, [pc, #544]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	029b      	lsls	r3, r3, #10
 8001a14:	4013      	ands	r3, r2
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0xf6>
 8001a18:	e000      	b.n	8001a1c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2202      	movs	r2, #2
 8001a22:	4013      	ands	r3, r2
 8001a24:	d100      	bne.n	8001a28 <HAL_RCC_OscConfig+0x124>
 8001a26:	e099      	b.n	8001b5c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a28:	4b81      	ldr	r3, [pc, #516]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2238      	movs	r2, #56	; 0x38
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a32:	4b7f      	ldr	r3, [pc, #508]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2203      	movs	r2, #3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b10      	cmp	r3, #16
 8001a40:	d102      	bne.n	8001a48 <HAL_RCC_OscConfig+0x144>
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d002      	beq.n	8001a4e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d135      	bne.n	8001aba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a4e:	4b78      	ldr	r3, [pc, #480]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4013      	ands	r3, r2
 8001a58:	d005      	beq.n	8001a66 <HAL_RCC_OscConfig+0x162>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e256      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a66:	4b72      	ldr	r3, [pc, #456]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4a74      	ldr	r2, [pc, #464]	; (8001c3c <HAL_RCC_OscConfig+0x338>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	0019      	movs	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	021a      	lsls	r2, r3, #8
 8001a76:	4b6e      	ldr	r3, [pc, #440]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d112      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a82:	4b6b      	ldr	r3, [pc, #428]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a6e      	ldr	r2, [pc, #440]	; (8001c40 <HAL_RCC_OscConfig+0x33c>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	4b67      	ldr	r3, [pc, #412]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a96:	4b66      	ldr	r3, [pc, #408]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	0adb      	lsrs	r3, r3, #11
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	4a68      	ldr	r2, [pc, #416]	; (8001c44 <HAL_RCC_OscConfig+0x340>)
 8001aa2:	40da      	lsrs	r2, r3
 8001aa4:	4b68      	ldr	r3, [pc, #416]	; (8001c48 <HAL_RCC_OscConfig+0x344>)
 8001aa6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001aa8:	4b68      	ldr	r3, [pc, #416]	; (8001c4c <HAL_RCC_OscConfig+0x348>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f7ff f8f3 	bl	8000c98 <HAL_InitTick>
 8001ab2:	1e03      	subs	r3, r0, #0
 8001ab4:	d051      	beq.n	8001b5a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e22c      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d030      	beq.n	8001b24 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ac2:	4b5b      	ldr	r3, [pc, #364]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a5e      	ldr	r2, [pc, #376]	; (8001c40 <HAL_RCC_OscConfig+0x33c>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	0019      	movs	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	4b57      	ldr	r3, [pc, #348]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ad6:	4b56      	ldr	r3, [pc, #344]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b55      	ldr	r3, [pc, #340]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001adc:	2180      	movs	r1, #128	; 0x80
 8001ade:	0049      	lsls	r1, r1, #1
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff f934 	bl	8000d50 <HAL_GetTick>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aee:	f7ff f92f 	bl	8000d50 <HAL_GetTick>
 8001af2:	0002      	movs	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e209      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b00:	4b4b      	ldr	r3, [pc, #300]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0c:	4b48      	ldr	r3, [pc, #288]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	4a4a      	ldr	r2, [pc, #296]	; (8001c3c <HAL_RCC_OscConfig+0x338>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	0019      	movs	r1, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	021a      	lsls	r2, r3, #8
 8001b1c:	4b44      	ldr	r3, [pc, #272]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	e01b      	b.n	8001b5c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b24:	4b42      	ldr	r3, [pc, #264]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b41      	ldr	r3, [pc, #260]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b2a:	4949      	ldr	r1, [pc, #292]	; (8001c50 <HAL_RCC_OscConfig+0x34c>)
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7ff f90e 	bl	8000d50 <HAL_GetTick>
 8001b34:	0003      	movs	r3, r0
 8001b36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3a:	f7ff f909 	bl	8000d50 <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e1e3      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b4c:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4013      	ands	r3, r2
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x236>
 8001b58:	e000      	b.n	8001b5c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b5a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2208      	movs	r2, #8
 8001b62:	4013      	ands	r3, r2
 8001b64:	d047      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b66:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2238      	movs	r2, #56	; 0x38
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	2b18      	cmp	r3, #24
 8001b70:	d10a      	bne.n	8001b88 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b72:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b76:	2202      	movs	r2, #2
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d03c      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2f2>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d138      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e1c5      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d019      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b90:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b94:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001b96:	2101      	movs	r1, #1
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f8d8 	bl	8000d50 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba6:	f7ff f8d3 	bl	8000d50 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e1ad      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d0f1      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x2a2>
 8001bc2:	e018      	b.n	8001bf6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001bc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001bca:	2101      	movs	r1, #1
 8001bcc:	438a      	bics	r2, r1
 8001bce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff f8be 	bl	8000d50 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bda:	f7ff f8b9 	bl	8000d50 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e193      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bec:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d1f1      	bne.n	8001bda <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d100      	bne.n	8001c02 <HAL_RCC_OscConfig+0x2fe>
 8001c00:	e0c6      	b.n	8001d90 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c02:	231f      	movs	r3, #31
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2238      	movs	r2, #56	; 0x38
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	d11e      	bne.n	8001c54 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_RCC_OscConfig+0x32c>)
 8001c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d100      	bne.n	8001c22 <HAL_RCC_OscConfig+0x31e>
 8001c20:	e0b6      	b.n	8001d90 <HAL_RCC_OscConfig+0x48c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d000      	beq.n	8001c2c <HAL_RCC_OscConfig+0x328>
 8001c2a:	e0b1      	b.n	8001d90 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e171      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
 8001c30:	40021000 	.word	0x40021000
 8001c34:	fffeffff 	.word	0xfffeffff
 8001c38:	fffbffff 	.word	0xfffbffff
 8001c3c:	ffff80ff 	.word	0xffff80ff
 8001c40:	ffffc7ff 	.word	0xffffc7ff
 8001c44:	00f42400 	.word	0x00f42400
 8001c48:	20000010 	.word	0x20000010
 8001c4c:	20000014 	.word	0x20000014
 8001c50:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c54:	4bb1      	ldr	r3, [pc, #708]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	055b      	lsls	r3, r3, #21
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_OscConfig+0x360>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_OscConfig+0x362>
 8001c64:	2300      	movs	r3, #0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d011      	beq.n	8001c8e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4bac      	ldr	r3, [pc, #688]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001c6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c6e:	4bab      	ldr	r3, [pc, #684]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001c70:	2180      	movs	r1, #128	; 0x80
 8001c72:	0549      	lsls	r1, r1, #21
 8001c74:	430a      	orrs	r2, r1
 8001c76:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c78:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	055b      	lsls	r3, r3, #21
 8001c80:	4013      	ands	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c86:	231f      	movs	r3, #31
 8001c88:	18fb      	adds	r3, r7, r3
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c8e:	4ba4      	ldr	r3, [pc, #656]	; (8001f20 <HAL_RCC_OscConfig+0x61c>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4013      	ands	r3, r2
 8001c98:	d11a      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c9a:	4ba1      	ldr	r3, [pc, #644]	; (8001f20 <HAL_RCC_OscConfig+0x61c>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	4ba0      	ldr	r3, [pc, #640]	; (8001f20 <HAL_RCC_OscConfig+0x61c>)
 8001ca0:	2180      	movs	r1, #128	; 0x80
 8001ca2:	0049      	lsls	r1, r1, #1
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff f852 	bl	8000d50 <HAL_GetTick>
 8001cac:	0003      	movs	r3, r0
 8001cae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb2:	f7ff f84d 	bl	8000d50 <HAL_GetTick>
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e127      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc4:	4b96      	ldr	r3, [pc, #600]	; (8001f20 <HAL_RCC_OscConfig+0x61c>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x3e2>
 8001cd8:	4b90      	ldr	r3, [pc, #576]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001cda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cdc:	4b8f      	ldr	r3, [pc, #572]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001cde:	2101      	movs	r1, #1
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ce4:	e01c      	b.n	8001d20 <HAL_RCC_OscConfig+0x41c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b05      	cmp	r3, #5
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x404>
 8001cee:	4b8b      	ldr	r3, [pc, #556]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001cf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cf2:	4b8a      	ldr	r3, [pc, #552]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cfa:	4b88      	ldr	r3, [pc, #544]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001cfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cfe:	4b87      	ldr	r3, [pc, #540]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d00:	2101      	movs	r1, #1
 8001d02:	430a      	orrs	r2, r1
 8001d04:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0x41c>
 8001d08:	4b84      	ldr	r3, [pc, #528]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d0c:	4b83      	ldr	r3, [pc, #524]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d0e:	2101      	movs	r1, #1
 8001d10:	438a      	bics	r2, r1
 8001d12:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d14:	4b81      	ldr	r3, [pc, #516]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d18:	4b80      	ldr	r3, [pc, #512]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d1a:	2104      	movs	r1, #4
 8001d1c:	438a      	bics	r2, r1
 8001d1e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d014      	beq.n	8001d52 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff f812 	bl	8000d50 <HAL_GetTick>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d30:	e009      	b.n	8001d46 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7ff f80d 	bl	8000d50 <HAL_GetTick>
 8001d36:	0002      	movs	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	4a79      	ldr	r2, [pc, #484]	; (8001f24 <HAL_RCC_OscConfig+0x620>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e0e6      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d46:	4b75      	ldr	r3, [pc, #468]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x42e>
 8001d50:	e013      	b.n	8001d7a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7fe fffd 	bl	8000d50 <HAL_GetTick>
 8001d56:	0003      	movs	r3, r0
 8001d58:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d5a:	e009      	b.n	8001d70 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5c:	f7fe fff8 	bl	8000d50 <HAL_GetTick>
 8001d60:	0002      	movs	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	4a6f      	ldr	r2, [pc, #444]	; (8001f24 <HAL_RCC_OscConfig+0x620>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e0d1      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d70:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	2202      	movs	r2, #2
 8001d76:	4013      	ands	r3, r2
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d7a:	231f      	movs	r3, #31
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d105      	bne.n	8001d90 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d84:	4b65      	ldr	r3, [pc, #404]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d88:	4b64      	ldr	r3, [pc, #400]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d8a:	4967      	ldr	r1, [pc, #412]	; (8001f28 <HAL_RCC_OscConfig+0x624>)
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d100      	bne.n	8001d9a <HAL_RCC_OscConfig+0x496>
 8001d98:	e0bb      	b.n	8001f12 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d9a:	4b60      	ldr	r3, [pc, #384]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2238      	movs	r2, #56	; 0x38
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b10      	cmp	r3, #16
 8001da4:	d100      	bne.n	8001da8 <HAL_RCC_OscConfig+0x4a4>
 8001da6:	e07b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d156      	bne.n	8001e5e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db0:	4b5a      	ldr	r3, [pc, #360]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b59      	ldr	r3, [pc, #356]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001db6:	495d      	ldr	r1, [pc, #372]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001db8:	400a      	ands	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7fe ffc8 	bl	8000d50 <HAL_GetTick>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7fe ffc3 	bl	8000d50 <HAL_GetTick>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e09d      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd8:	4b50      	ldr	r3, [pc, #320]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	049b      	lsls	r3, r3, #18
 8001de0:	4013      	ands	r3, r2
 8001de2:	d1f0      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de4:	4b4d      	ldr	r3, [pc, #308]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4a51      	ldr	r2, [pc, #324]	; (8001f30 <HAL_RCC_OscConfig+0x62c>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1a      	ldr	r2, [r3, #32]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e10:	431a      	orrs	r2, r3
 8001e12:	4b42      	ldr	r3, [pc, #264]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e14:	430a      	orrs	r2, r1
 8001e16:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	4b40      	ldr	r3, [pc, #256]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b3f      	ldr	r3, [pc, #252]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e1e:	2180      	movs	r1, #128	; 0x80
 8001e20:	0449      	lsls	r1, r1, #17
 8001e22:	430a      	orrs	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	4b3c      	ldr	r3, [pc, #240]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e2c:	2180      	movs	r1, #128	; 0x80
 8001e2e:	0549      	lsls	r1, r1, #21
 8001e30:	430a      	orrs	r2, r1
 8001e32:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7fe ff8c 	bl	8000d50 <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7fe ff87 	bl	8000d50 <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e061      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e50:	4b32      	ldr	r3, [pc, #200]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	049b      	lsls	r3, r3, #18
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x53a>
 8001e5c:	e059      	b.n	8001f12 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e64:	4931      	ldr	r1, [pc, #196]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001e66:	400a      	ands	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7fe ff71 	bl	8000d50 <HAL_GetTick>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7fe ff6c 	bl	8000d50 <HAL_GetTick>
 8001e78:	0002      	movs	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e046      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e86:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	049b      	lsls	r3, r3, #18
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001e92:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001e98:	4926      	ldr	r1, [pc, #152]	; (8001f34 <HAL_RCC_OscConfig+0x630>)
 8001e9a:	400a      	ands	r2, r1
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	e038      	b.n	8001f12 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e033      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_RCC_OscConfig+0x618>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d126      	bne.n	8001f0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2270      	movs	r2, #112	; 0x70
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d11f      	bne.n	8001f0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	23fe      	movs	r3, #254	; 0xfe
 8001ed2:	01db      	lsls	r3, r3, #7
 8001ed4:	401a      	ands	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d116      	bne.n	8001f0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	23f8      	movs	r3, #248	; 0xf8
 8001ee4:	039b      	lsls	r3, r3, #14
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d10e      	bne.n	8001f0e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	23e0      	movs	r3, #224	; 0xe0
 8001ef4:	051b      	lsls	r3, r3, #20
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d106      	bne.n	8001f0e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	0f5b      	lsrs	r3, r3, #29
 8001f04:	075a      	lsls	r2, r3, #29
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b008      	add	sp, #32
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40007000 	.word	0x40007000
 8001f24:	00001388 	.word	0x00001388
 8001f28:	efffffff 	.word	0xefffffff
 8001f2c:	feffffff 	.word	0xfeffffff
 8001f30:	11c1808c 	.word	0x11c1808c
 8001f34:	eefefffc 	.word	0xeefefffc

08001f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0e9      	b.n	8002120 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b76      	ldr	r3, [pc, #472]	; (8002128 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2207      	movs	r2, #7
 8001f52:	4013      	ands	r3, r2
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d91e      	bls.n	8001f98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5a:	4b73      	ldr	r3, [pc, #460]	; (8002128 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2207      	movs	r2, #7
 8001f60:	4393      	bics	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	4b70      	ldr	r3, [pc, #448]	; (8002128 <HAL_RCC_ClockConfig+0x1f0>)
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f6c:	f7fe fef0 	bl	8000d50 <HAL_GetTick>
 8001f70:	0003      	movs	r3, r0
 8001f72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f74:	e009      	b.n	8001f8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f76:	f7fe feeb 	bl	8000d50 <HAL_GetTick>
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	4a6a      	ldr	r2, [pc, #424]	; (800212c <HAL_RCC_ClockConfig+0x1f4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e0ca      	b.n	8002120 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f8a:	4b67      	ldr	r3, [pc, #412]	; (8002128 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2207      	movs	r2, #7
 8001f90:	4013      	ands	r3, r2
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d1ee      	bne.n	8001f76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d015      	beq.n	8001fce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d006      	beq.n	8001fba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fac:	4b60      	ldr	r3, [pc, #384]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	4b5f      	ldr	r3, [pc, #380]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8001fb2:	21e0      	movs	r1, #224	; 0xe0
 8001fb4:	01c9      	lsls	r1, r1, #7
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fba:	4b5d      	ldr	r3, [pc, #372]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	4a5d      	ldr	r2, [pc, #372]	; (8002134 <HAL_RCC_ClockConfig+0x1fc>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	4b59      	ldr	r3, [pc, #356]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d057      	beq.n	8002088 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d107      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe0:	4b53      	ldr	r3, [pc, #332]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	029b      	lsls	r3, r3, #10
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d12b      	bne.n	8002044 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e097      	b.n	8002120 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff8:	4b4d      	ldr	r3, [pc, #308]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	049b      	lsls	r3, r3, #18
 8002000:	4013      	ands	r3, r2
 8002002:	d11f      	bne.n	8002044 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e08b      	b.n	8002120 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d107      	bne.n	8002020 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002010:	4b47      	ldr	r3, [pc, #284]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4013      	ands	r3, r2
 800201a:	d113      	bne.n	8002044 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e07f      	b.n	8002120 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d106      	bne.n	8002036 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002028:	4b41      	ldr	r3, [pc, #260]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 800202a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202c:	2202      	movs	r2, #2
 800202e:	4013      	ands	r3, r2
 8002030:	d108      	bne.n	8002044 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e074      	b.n	8002120 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002036:	4b3e      	ldr	r3, [pc, #248]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	2202      	movs	r2, #2
 800203c:	4013      	ands	r3, r2
 800203e:	d101      	bne.n	8002044 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e06d      	b.n	8002120 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002044:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2207      	movs	r2, #7
 800204a:	4393      	bics	r3, r2
 800204c:	0019      	movs	r1, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4b37      	ldr	r3, [pc, #220]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8002054:	430a      	orrs	r2, r1
 8002056:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002058:	f7fe fe7a 	bl	8000d50 <HAL_GetTick>
 800205c:	0003      	movs	r3, r0
 800205e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002060:	e009      	b.n	8002076 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002062:	f7fe fe75 	bl	8000d50 <HAL_GetTick>
 8002066:	0002      	movs	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	4a2f      	ldr	r2, [pc, #188]	; (800212c <HAL_RCC_ClockConfig+0x1f4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e054      	b.n	8002120 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	4b2e      	ldr	r3, [pc, #184]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2238      	movs	r2, #56	; 0x38
 800207c:	401a      	ands	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	429a      	cmp	r2, r3
 8002086:	d1ec      	bne.n	8002062 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	4b27      	ldr	r3, [pc, #156]	; (8002128 <HAL_RCC_ClockConfig+0x1f0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2207      	movs	r2, #7
 800208e:	4013      	ands	r3, r2
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d21e      	bcs.n	80020d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_RCC_ClockConfig+0x1f0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2207      	movs	r2, #7
 800209c:	4393      	bics	r3, r2
 800209e:	0019      	movs	r1, r3
 80020a0:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_RCC_ClockConfig+0x1f0>)
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020a8:	f7fe fe52 	bl	8000d50 <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020b0:	e009      	b.n	80020c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b2:	f7fe fe4d 	bl	8000d50 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	4a1b      	ldr	r2, [pc, #108]	; (800212c <HAL_RCC_ClockConfig+0x1f4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e02c      	b.n	8002120 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <HAL_RCC_ClockConfig+0x1f0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2207      	movs	r2, #7
 80020cc:	4013      	ands	r3, r2
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d1ee      	bne.n	80020b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2204      	movs	r2, #4
 80020da:	4013      	ands	r3, r2
 80020dc:	d009      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020de:	4b14      	ldr	r3, [pc, #80]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	4a15      	ldr	r2, [pc, #84]	; (8002138 <HAL_RCC_ClockConfig+0x200>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	0019      	movs	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	4b10      	ldr	r3, [pc, #64]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 80020ee:	430a      	orrs	r2, r1
 80020f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020f2:	f000 f829 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 80020f6:	0001      	movs	r1, r0
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <HAL_RCC_ClockConfig+0x1f8>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	220f      	movs	r2, #15
 8002100:	401a      	ands	r2, r3
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_RCC_ClockConfig+0x204>)
 8002104:	0092      	lsls	r2, r2, #2
 8002106:	58d3      	ldr	r3, [r2, r3]
 8002108:	221f      	movs	r2, #31
 800210a:	4013      	ands	r3, r2
 800210c:	000a      	movs	r2, r1
 800210e:	40da      	lsrs	r2, r3
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_ClockConfig+0x208>)
 8002112:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_ClockConfig+0x20c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0018      	movs	r0, r3
 800211a:	f7fe fdbd 	bl	8000c98 <HAL_InitTick>
 800211e:	0003      	movs	r3, r0
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	b004      	add	sp, #16
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40022000 	.word	0x40022000
 800212c:	00001388 	.word	0x00001388
 8002130:	40021000 	.word	0x40021000
 8002134:	fffff0ff 	.word	0xfffff0ff
 8002138:	ffff8fff 	.word	0xffff8fff
 800213c:	08003f30 	.word	0x08003f30
 8002140:	20000010 	.word	0x20000010
 8002144:	20000014 	.word	0x20000014

08002148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800214e:	4b3c      	ldr	r3, [pc, #240]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2238      	movs	r2, #56	; 0x38
 8002154:	4013      	ands	r3, r2
 8002156:	d10f      	bne.n	8002178 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002158:	4b39      	ldr	r3, [pc, #228]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0adb      	lsrs	r3, r3, #11
 800215e:	2207      	movs	r2, #7
 8002160:	4013      	ands	r3, r2
 8002162:	2201      	movs	r2, #1
 8002164:	409a      	lsls	r2, r3
 8002166:	0013      	movs	r3, r2
 8002168:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800216a:	6839      	ldr	r1, [r7, #0]
 800216c:	4835      	ldr	r0, [pc, #212]	; (8002244 <HAL_RCC_GetSysClockFreq+0xfc>)
 800216e:	f7fd ffd1 	bl	8000114 <__udivsi3>
 8002172:	0003      	movs	r3, r0
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	e05d      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002178:	4b31      	ldr	r3, [pc, #196]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2238      	movs	r2, #56	; 0x38
 800217e:	4013      	ands	r3, r2
 8002180:	2b08      	cmp	r3, #8
 8002182:	d102      	bne.n	800218a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002184:	4b30      	ldr	r3, [pc, #192]	; (8002248 <HAL_RCC_GetSysClockFreq+0x100>)
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	e054      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2238      	movs	r2, #56	; 0x38
 8002190:	4013      	ands	r3, r2
 8002192:	2b10      	cmp	r3, #16
 8002194:	d138      	bne.n	8002208 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002196:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2203      	movs	r2, #3
 800219c:	4013      	ands	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021a0:	4b27      	ldr	r3, [pc, #156]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	2207      	movs	r2, #7
 80021a8:	4013      	ands	r3, r2
 80021aa:	3301      	adds	r3, #1
 80021ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d10d      	bne.n	80021d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	4824      	ldr	r0, [pc, #144]	; (8002248 <HAL_RCC_GetSysClockFreq+0x100>)
 80021b8:	f7fd ffac 	bl	8000114 <__udivsi3>
 80021bc:	0003      	movs	r3, r0
 80021be:	0019      	movs	r1, r3
 80021c0:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	227f      	movs	r2, #127	; 0x7f
 80021c8:	4013      	ands	r3, r2
 80021ca:	434b      	muls	r3, r1
 80021cc:	617b      	str	r3, [r7, #20]
        break;
 80021ce:	e00d      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	481c      	ldr	r0, [pc, #112]	; (8002244 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021d4:	f7fd ff9e 	bl	8000114 <__udivsi3>
 80021d8:	0003      	movs	r3, r0
 80021da:	0019      	movs	r1, r3
 80021dc:	4b18      	ldr	r3, [pc, #96]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	227f      	movs	r2, #127	; 0x7f
 80021e4:	4013      	ands	r3, r2
 80021e6:	434b      	muls	r3, r1
 80021e8:	617b      	str	r3, [r7, #20]
        break;
 80021ea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0f5b      	lsrs	r3, r3, #29
 80021f2:	2207      	movs	r2, #7
 80021f4:	4013      	ands	r3, r2
 80021f6:	3301      	adds	r3, #1
 80021f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	6978      	ldr	r0, [r7, #20]
 80021fe:	f7fd ff89 	bl	8000114 <__udivsi3>
 8002202:	0003      	movs	r3, r0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	e015      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002208:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2238      	movs	r2, #56	; 0x38
 800220e:	4013      	ands	r3, r2
 8002210:	2b20      	cmp	r3, #32
 8002212:	d103      	bne.n	800221c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf8>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2238      	movs	r2, #56	; 0x38
 8002222:	4013      	ands	r3, r2
 8002224:	2b18      	cmp	r3, #24
 8002226:	d103      	bne.n	8002230 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002228:	23fa      	movs	r3, #250	; 0xfa
 800222a:	01db      	lsls	r3, r3, #7
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	e001      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002234:	693b      	ldr	r3, [r7, #16]
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b006      	add	sp, #24
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	40021000 	.word	0x40021000
 8002244:	00f42400 	.word	0x00f42400
 8002248:	007a1200 	.word	0x007a1200

0800224c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002250:	4b02      	ldr	r3, [pc, #8]	; (800225c <HAL_RCC_GetHCLKFreq+0x10>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	20000010 	.word	0x20000010

08002260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002264:	f7ff fff2 	bl	800224c <HAL_RCC_GetHCLKFreq>
 8002268:	0004      	movs	r4, r0
 800226a:	f7ff fb3f 	bl	80018ec <LL_RCC_GetAPB1Prescaler>
 800226e:	0003      	movs	r3, r0
 8002270:	0b1a      	lsrs	r2, r3, #12
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002274:	0092      	lsls	r2, r2, #2
 8002276:	58d3      	ldr	r3, [r2, r3]
 8002278:	221f      	movs	r2, #31
 800227a:	4013      	ands	r3, r2
 800227c:	40dc      	lsrs	r4, r3
 800227e:	0023      	movs	r3, r4
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	bdb0      	pop	{r4, r5, r7, pc}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	08003f70 	.word	0x08003f70

0800228c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002294:	2313      	movs	r3, #19
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800229c:	2312      	movs	r3, #18
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	029b      	lsls	r3, r3, #10
 80022ac:	4013      	ands	r3, r2
 80022ae:	d100      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80022b0:	e0a3      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b2:	2011      	movs	r0, #17
 80022b4:	183b      	adds	r3, r7, r0
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ba:	4ba5      	ldr	r3, [pc, #660]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	055b      	lsls	r3, r3, #21
 80022c2:	4013      	ands	r3, r2
 80022c4:	d110      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	4ba2      	ldr	r3, [pc, #648]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ca:	4ba1      	ldr	r3, [pc, #644]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022cc:	2180      	movs	r1, #128	; 0x80
 80022ce:	0549      	lsls	r1, r1, #21
 80022d0:	430a      	orrs	r2, r1
 80022d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80022d4:	4b9e      	ldr	r3, [pc, #632]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	055b      	lsls	r3, r3, #21
 80022dc:	4013      	ands	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e2:	183b      	adds	r3, r7, r0
 80022e4:	2201      	movs	r2, #1
 80022e6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022e8:	4b9a      	ldr	r3, [pc, #616]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b99      	ldr	r3, [pc, #612]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	0049      	lsls	r1, r1, #1
 80022f2:	430a      	orrs	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022f6:	f7fe fd2b 	bl	8000d50 <HAL_GetTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022fe:	e00b      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002300:	f7fe fd26 	bl	8000d50 <HAL_GetTick>
 8002304:	0002      	movs	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d904      	bls.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800230e:	2313      	movs	r3, #19
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	2203      	movs	r2, #3
 8002314:	701a      	strb	r2, [r3, #0]
        break;
 8002316:	e005      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002318:	4b8e      	ldr	r3, [pc, #568]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4013      	ands	r3, r2
 8002322:	d0ed      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002324:	2313      	movs	r3, #19
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d154      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800232e:	4b88      	ldr	r3, [pc, #544]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002330:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002332:	23c0      	movs	r3, #192	; 0xc0
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4013      	ands	r3, r2
 8002338:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d019      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	429a      	cmp	r2, r3
 8002348:	d014      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800234a:	4b81      	ldr	r3, [pc, #516]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800234c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234e:	4a82      	ldr	r2, [pc, #520]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002350:	4013      	ands	r3, r2
 8002352:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002354:	4b7e      	ldr	r3, [pc, #504]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002356:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002358:	4b7d      	ldr	r3, [pc, #500]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800235a:	2180      	movs	r1, #128	; 0x80
 800235c:	0249      	lsls	r1, r1, #9
 800235e:	430a      	orrs	r2, r1
 8002360:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002362:	4b7b      	ldr	r3, [pc, #492]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002364:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002366:	4b7a      	ldr	r3, [pc, #488]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002368:	497c      	ldr	r1, [pc, #496]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800236a:	400a      	ands	r2, r1
 800236c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800236e:	4b78      	ldr	r3, [pc, #480]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2201      	movs	r2, #1
 8002378:	4013      	ands	r3, r2
 800237a:	d016      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe fce8 	bl	8000d50 <HAL_GetTick>
 8002380:	0003      	movs	r3, r0
 8002382:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002384:	e00c      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7fe fce3 	bl	8000d50 <HAL_GetTick>
 800238a:	0002      	movs	r2, r0
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	4a73      	ldr	r2, [pc, #460]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d904      	bls.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002396:	2313      	movs	r3, #19
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	2203      	movs	r2, #3
 800239c:	701a      	strb	r2, [r3, #0]
            break;
 800239e:	e004      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a0:	4b6b      	ldr	r3, [pc, #428]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	2202      	movs	r2, #2
 80023a6:	4013      	ands	r3, r2
 80023a8:	d0ed      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80023aa:	2313      	movs	r3, #19
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10a      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023b4:	4b66      	ldr	r3, [pc, #408]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b8:	4a67      	ldr	r2, [pc, #412]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023c2:	4b63      	ldr	r3, [pc, #396]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023c4:	430a      	orrs	r2, r1
 80023c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80023c8:	e00c      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023ca:	2312      	movs	r3, #18
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	2213      	movs	r2, #19
 80023d0:	18ba      	adds	r2, r7, r2
 80023d2:	7812      	ldrb	r2, [r2, #0]
 80023d4:	701a      	strb	r2, [r3, #0]
 80023d6:	e005      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d8:	2312      	movs	r3, #18
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	2213      	movs	r2, #19
 80023de:	18ba      	adds	r2, r7, r2
 80023e0:	7812      	ldrb	r2, [r2, #0]
 80023e2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023e4:	2311      	movs	r3, #17
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d105      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ee:	4b58      	ldr	r3, [pc, #352]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023f2:	4b57      	ldr	r3, [pc, #348]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023f4:	495b      	ldr	r1, [pc, #364]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80023f6:	400a      	ands	r2, r1
 80023f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2201      	movs	r2, #1
 8002400:	4013      	ands	r3, r2
 8002402:	d009      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002404:	4b52      	ldr	r3, [pc, #328]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	2203      	movs	r2, #3
 800240a:	4393      	bics	r3, r2
 800240c:	0019      	movs	r1, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	4b4f      	ldr	r3, [pc, #316]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002414:	430a      	orrs	r2, r1
 8002416:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2210      	movs	r2, #16
 800241e:	4013      	ands	r3, r2
 8002420:	d009      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002422:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002426:	4a50      	ldr	r2, [pc, #320]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002428:	4013      	ands	r3, r2
 800242a:	0019      	movs	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	4b47      	ldr	r3, [pc, #284]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002432:	430a      	orrs	r2, r1
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4013      	ands	r3, r2
 8002440:	d009      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002442:	4b43      	ldr	r3, [pc, #268]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	4a49      	ldr	r2, [pc, #292]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002448:	4013      	ands	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002452:	430a      	orrs	r2, r1
 8002454:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4013      	ands	r3, r2
 8002460:	d009      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002462:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	4a42      	ldr	r2, [pc, #264]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002468:	4013      	ands	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699a      	ldr	r2, [r3, #24]
 8002470:	4b37      	ldr	r3, [pc, #220]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002472:	430a      	orrs	r2, r1
 8002474:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2220      	movs	r2, #32
 800247c:	4013      	ands	r3, r2
 800247e:	d009      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002480:	4b33      	ldr	r3, [pc, #204]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002484:	4a3b      	ldr	r2, [pc, #236]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002486:	4013      	ands	r3, r2
 8002488:	0019      	movs	r1, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	4b30      	ldr	r3, [pc, #192]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002490:	430a      	orrs	r2, r1
 8002492:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	01db      	lsls	r3, r3, #7
 800249c:	4013      	ands	r3, r2
 800249e:	d015      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024a0:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	0899      	lsrs	r1, r3, #2
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69da      	ldr	r2, [r3, #28]
 80024ac:	4b28      	ldr	r3, [pc, #160]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024ae:	430a      	orrs	r2, r1
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69da      	ldr	r2, [r3, #28]
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	05db      	lsls	r3, r3, #23
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d106      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024be:	4b24      	ldr	r3, [pc, #144]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	4b23      	ldr	r3, [pc, #140]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	0249      	lsls	r1, r1, #9
 80024c8:	430a      	orrs	r2, r1
 80024ca:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	039b      	lsls	r3, r3, #14
 80024d4:	4013      	ands	r3, r2
 80024d6:	d016      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024dc:	4a26      	ldr	r2, [pc, #152]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80024de:	4013      	ands	r3, r2
 80024e0:	0019      	movs	r1, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1a      	ldr	r2, [r3, #32]
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024e8:	430a      	orrs	r2, r1
 80024ea:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1a      	ldr	r2, [r3, #32]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	03db      	lsls	r3, r3, #15
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d106      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80024f8:	4b15      	ldr	r3, [pc, #84]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024fe:	2180      	movs	r1, #128	; 0x80
 8002500:	0449      	lsls	r1, r1, #17
 8002502:	430a      	orrs	r2, r1
 8002504:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	4013      	ands	r3, r2
 8002510:	d016      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002512:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002516:	4a19      	ldr	r2, [pc, #100]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002518:	4013      	ands	r3, r2
 800251a:	0019      	movs	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002522:	430a      	orrs	r2, r1
 8002524:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	01db      	lsls	r3, r3, #7
 800252e:	429a      	cmp	r2, r3
 8002530:	d106      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002538:	2180      	movs	r1, #128	; 0x80
 800253a:	0249      	lsls	r1, r1, #9
 800253c:	430a      	orrs	r2, r1
 800253e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002540:	2312      	movs	r3, #18
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	781b      	ldrb	r3, [r3, #0]
}
 8002546:	0018      	movs	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	b006      	add	sp, #24
 800254c:	bd80      	pop	{r7, pc}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	40021000 	.word	0x40021000
 8002554:	40007000 	.word	0x40007000
 8002558:	fffffcff 	.word	0xfffffcff
 800255c:	fffeffff 	.word	0xfffeffff
 8002560:	00001388 	.word	0x00001388
 8002564:	efffffff 	.word	0xefffffff
 8002568:	fffff3ff 	.word	0xfffff3ff
 800256c:	fff3ffff 	.word	0xfff3ffff
 8002570:	ffcfffff 	.word	0xffcfffff
 8002574:	ffffcfff 	.word	0xffffcfff
 8002578:	ffbfffff 	.word	0xffbfffff
 800257c:	ffff3fff 	.word	0xffff3fff

08002580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e046      	b.n	8002620 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2288      	movs	r2, #136	; 0x88
 8002596:	589b      	ldr	r3, [r3, r2]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d107      	bne.n	80025ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2284      	movs	r2, #132	; 0x84
 80025a0:	2100      	movs	r1, #0
 80025a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	0018      	movs	r0, r3
 80025a8:	f7fe fa26 	bl	80009f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2288      	movs	r2, #136	; 0x88
 80025b0:	2124      	movs	r1, #36	; 0x24
 80025b2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2101      	movs	r1, #1
 80025c0:	438a      	bics	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	0018      	movs	r0, r3
 80025c8:	f000 fc12 	bl	8002df0 <UART_SetConfig>
 80025cc:	0003      	movs	r3, r0
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e024      	b.n	8002620 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fe7d 	bl	80032e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	490d      	ldr	r1, [pc, #52]	; (8002628 <HAL_UART_Init+0xa8>)
 80025f2:	400a      	ands	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	212a      	movs	r1, #42	; 0x2a
 8002602:	438a      	bics	r2, r1
 8002604:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2101      	movs	r1, #1
 8002612:	430a      	orrs	r2, r1
 8002614:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	0018      	movs	r0, r3
 800261a:	f000 ff15 	bl	8003448 <UART_CheckIdleState>
 800261e:	0003      	movs	r3, r0
}
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}
 8002628:	ffffb7ff 	.word	0xffffb7ff

0800262c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	1dbb      	adds	r3, r7, #6
 800263a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2288      	movs	r2, #136	; 0x88
 8002640:	589b      	ldr	r3, [r3, r2]
 8002642:	2b20      	cmp	r3, #32
 8002644:	d000      	beq.n	8002648 <HAL_UART_Transmit+0x1c>
 8002646:	e088      	b.n	800275a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_UART_Transmit+0x2a>
 800264e:	1dbb      	adds	r3, r7, #6
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e080      	b.n	800275c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	015b      	lsls	r3, r3, #5
 8002662:	429a      	cmp	r2, r3
 8002664:	d109      	bne.n	800267a <HAL_UART_Transmit+0x4e>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d105      	bne.n	800267a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2201      	movs	r2, #1
 8002672:	4013      	ands	r3, r2
 8002674:	d001      	beq.n	800267a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e070      	b.n	800275c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2290      	movs	r2, #144	; 0x90
 800267e:	2100      	movs	r1, #0
 8002680:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2288      	movs	r2, #136	; 0x88
 8002686:	2121      	movs	r1, #33	; 0x21
 8002688:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800268a:	f7fe fb61 	bl	8000d50 <HAL_GetTick>
 800268e:	0003      	movs	r3, r0
 8002690:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1dba      	adds	r2, r7, #6
 8002696:	2154      	movs	r1, #84	; 0x54
 8002698:	8812      	ldrh	r2, [r2, #0]
 800269a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1dba      	adds	r2, r7, #6
 80026a0:	2156      	movs	r1, #86	; 0x56
 80026a2:	8812      	ldrh	r2, [r2, #0]
 80026a4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	015b      	lsls	r3, r3, #5
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d108      	bne.n	80026c4 <HAL_UART_Transmit+0x98>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d104      	bne.n	80026c4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	e003      	b.n	80026cc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026cc:	e02c      	b.n	8002728 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	0013      	movs	r3, r2
 80026d8:	2200      	movs	r2, #0
 80026da:	2180      	movs	r1, #128	; 0x80
 80026dc:	f000 ff02 	bl	80034e4 <UART_WaitOnFlagUntilTimeout>
 80026e0:	1e03      	subs	r3, r0, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e039      	b.n	800275c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10b      	bne.n	8002706 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	001a      	movs	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	05d2      	lsls	r2, r2, #23
 80026fa:	0dd2      	lsrs	r2, r2, #23
 80026fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	3302      	adds	r3, #2
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	e007      	b.n	8002716 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	781a      	ldrb	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	3301      	adds	r3, #1
 8002714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2256      	movs	r2, #86	; 0x56
 800271a:	5a9b      	ldrh	r3, [r3, r2]
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b299      	uxth	r1, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2256      	movs	r2, #86	; 0x56
 8002726:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2256      	movs	r2, #86	; 0x56
 800272c:	5a9b      	ldrh	r3, [r3, r2]
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1cc      	bne.n	80026ce <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	0013      	movs	r3, r2
 800273e:	2200      	movs	r2, #0
 8002740:	2140      	movs	r1, #64	; 0x40
 8002742:	f000 fecf 	bl	80034e4 <UART_WaitOnFlagUntilTimeout>
 8002746:	1e03      	subs	r3, r0, #0
 8002748:	d001      	beq.n	800274e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e006      	b.n	800275c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2288      	movs	r2, #136	; 0x88
 8002752:	2120      	movs	r1, #32
 8002754:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e000      	b.n	800275c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800275a:	2302      	movs	r3, #2
  }
}
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	b008      	add	sp, #32
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002764:	b5b0      	push	{r4, r5, r7, lr}
 8002766:	b0aa      	sub	sp, #168	; 0xa8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	22a4      	movs	r2, #164	; 0xa4
 8002774:	18b9      	adds	r1, r7, r2
 8002776:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	20a0      	movs	r0, #160	; 0xa0
 8002780:	1839      	adds	r1, r7, r0
 8002782:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	249c      	movs	r4, #156	; 0x9c
 800278c:	1939      	adds	r1, r7, r4
 800278e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002790:	0011      	movs	r1, r2
 8002792:	18bb      	adds	r3, r7, r2
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4aa2      	ldr	r2, [pc, #648]	; (8002a20 <HAL_UART_IRQHandler+0x2bc>)
 8002798:	4013      	ands	r3, r2
 800279a:	2298      	movs	r2, #152	; 0x98
 800279c:	18bd      	adds	r5, r7, r2
 800279e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80027a0:	18bb      	adds	r3, r7, r2
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d11a      	bne.n	80027de <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2220      	movs	r2, #32
 80027ae:	4013      	ands	r3, r2
 80027b0:	d015      	beq.n	80027de <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80027b2:	183b      	adds	r3, r7, r0
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2220      	movs	r2, #32
 80027b8:	4013      	ands	r3, r2
 80027ba:	d105      	bne.n	80027c8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80027bc:	193b      	adds	r3, r7, r4
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	055b      	lsls	r3, r3, #21
 80027c4:	4013      	ands	r3, r2
 80027c6:	d00a      	beq.n	80027de <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d100      	bne.n	80027d2 <HAL_UART_IRQHandler+0x6e>
 80027d0:	e2dc      	b.n	8002d8c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	0010      	movs	r0, r2
 80027da:	4798      	blx	r3
      }
      return;
 80027dc:	e2d6      	b.n	8002d8c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80027de:	2398      	movs	r3, #152	; 0x98
 80027e0:	18fb      	adds	r3, r7, r3
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d100      	bne.n	80027ea <HAL_UART_IRQHandler+0x86>
 80027e8:	e122      	b.n	8002a30 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80027ea:	239c      	movs	r3, #156	; 0x9c
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a8c      	ldr	r2, [pc, #560]	; (8002a24 <HAL_UART_IRQHandler+0x2c0>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	d106      	bne.n	8002804 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80027f6:	23a0      	movs	r3, #160	; 0xa0
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a8a      	ldr	r2, [pc, #552]	; (8002a28 <HAL_UART_IRQHandler+0x2c4>)
 80027fe:	4013      	ands	r3, r2
 8002800:	d100      	bne.n	8002804 <HAL_UART_IRQHandler+0xa0>
 8002802:	e115      	b.n	8002a30 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002804:	23a4      	movs	r3, #164	; 0xa4
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2201      	movs	r2, #1
 800280c:	4013      	ands	r3, r2
 800280e:	d012      	beq.n	8002836 <HAL_UART_IRQHandler+0xd2>
 8002810:	23a0      	movs	r3, #160	; 0xa0
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4013      	ands	r3, r2
 800281c:	d00b      	beq.n	8002836 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2201      	movs	r2, #1
 8002824:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2290      	movs	r2, #144	; 0x90
 800282a:	589b      	ldr	r3, [r3, r2]
 800282c:	2201      	movs	r2, #1
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2190      	movs	r1, #144	; 0x90
 8002834:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002836:	23a4      	movs	r3, #164	; 0xa4
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2202      	movs	r2, #2
 800283e:	4013      	ands	r3, r2
 8002840:	d011      	beq.n	8002866 <HAL_UART_IRQHandler+0x102>
 8002842:	239c      	movs	r3, #156	; 0x9c
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2201      	movs	r2, #1
 800284a:	4013      	ands	r3, r2
 800284c:	d00b      	beq.n	8002866 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2202      	movs	r2, #2
 8002854:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2290      	movs	r2, #144	; 0x90
 800285a:	589b      	ldr	r3, [r3, r2]
 800285c:	2204      	movs	r2, #4
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2190      	movs	r1, #144	; 0x90
 8002864:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002866:	23a4      	movs	r3, #164	; 0xa4
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2204      	movs	r2, #4
 800286e:	4013      	ands	r3, r2
 8002870:	d011      	beq.n	8002896 <HAL_UART_IRQHandler+0x132>
 8002872:	239c      	movs	r3, #156	; 0x9c
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2201      	movs	r2, #1
 800287a:	4013      	ands	r3, r2
 800287c:	d00b      	beq.n	8002896 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2204      	movs	r2, #4
 8002884:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2290      	movs	r2, #144	; 0x90
 800288a:	589b      	ldr	r3, [r3, r2]
 800288c:	2202      	movs	r2, #2
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2190      	movs	r1, #144	; 0x90
 8002894:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002896:	23a4      	movs	r3, #164	; 0xa4
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2208      	movs	r2, #8
 800289e:	4013      	ands	r3, r2
 80028a0:	d017      	beq.n	80028d2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80028a2:	23a0      	movs	r3, #160	; 0xa0
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2220      	movs	r2, #32
 80028aa:	4013      	ands	r3, r2
 80028ac:	d105      	bne.n	80028ba <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80028ae:	239c      	movs	r3, #156	; 0x9c
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a5b      	ldr	r2, [pc, #364]	; (8002a24 <HAL_UART_IRQHandler+0x2c0>)
 80028b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80028b8:	d00b      	beq.n	80028d2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2208      	movs	r2, #8
 80028c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2290      	movs	r2, #144	; 0x90
 80028c6:	589b      	ldr	r3, [r3, r2]
 80028c8:	2208      	movs	r2, #8
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2190      	movs	r1, #144	; 0x90
 80028d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028d2:	23a4      	movs	r3, #164	; 0xa4
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	4013      	ands	r3, r2
 80028de:	d013      	beq.n	8002908 <HAL_UART_IRQHandler+0x1a4>
 80028e0:	23a0      	movs	r3, #160	; 0xa0
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	04db      	lsls	r3, r3, #19
 80028ea:	4013      	ands	r3, r2
 80028ec:	d00c      	beq.n	8002908 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2280      	movs	r2, #128	; 0x80
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2290      	movs	r2, #144	; 0x90
 80028fc:	589b      	ldr	r3, [r3, r2]
 80028fe:	2220      	movs	r2, #32
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2190      	movs	r1, #144	; 0x90
 8002906:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2290      	movs	r2, #144	; 0x90
 800290c:	589b      	ldr	r3, [r3, r2]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d100      	bne.n	8002914 <HAL_UART_IRQHandler+0x1b0>
 8002912:	e23d      	b.n	8002d90 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002914:	23a4      	movs	r3, #164	; 0xa4
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2220      	movs	r2, #32
 800291c:	4013      	ands	r3, r2
 800291e:	d015      	beq.n	800294c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002920:	23a0      	movs	r3, #160	; 0xa0
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2220      	movs	r2, #32
 8002928:	4013      	ands	r3, r2
 800292a:	d106      	bne.n	800293a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800292c:	239c      	movs	r3, #156	; 0x9c
 800292e:	18fb      	adds	r3, r7, r3
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	055b      	lsls	r3, r3, #21
 8002936:	4013      	ands	r3, r2
 8002938:	d008      	beq.n	800294c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293e:	2b00      	cmp	r3, #0
 8002940:	d004      	beq.n	800294c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	0010      	movs	r0, r2
 800294a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2290      	movs	r2, #144	; 0x90
 8002950:	589b      	ldr	r3, [r3, r2]
 8002952:	2194      	movs	r1, #148	; 0x94
 8002954:	187a      	adds	r2, r7, r1
 8002956:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2240      	movs	r2, #64	; 0x40
 8002960:	4013      	ands	r3, r2
 8002962:	2b40      	cmp	r3, #64	; 0x40
 8002964:	d004      	beq.n	8002970 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002966:	187b      	adds	r3, r7, r1
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2228      	movs	r2, #40	; 0x28
 800296c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800296e:	d04c      	beq.n	8002a0a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	0018      	movs	r0, r3
 8002974:	f000 ff64 	bl	8003840 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2240      	movs	r2, #64	; 0x40
 8002980:	4013      	ands	r3, r2
 8002982:	2b40      	cmp	r3, #64	; 0x40
 8002984:	d13c      	bne.n	8002a00 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002986:	f3ef 8310 	mrs	r3, PRIMASK
 800298a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800298c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800298e:	2090      	movs	r0, #144	; 0x90
 8002990:	183a      	adds	r2, r7, r0
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	2301      	movs	r3, #1
 8002996:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800299a:	f383 8810 	msr	PRIMASK, r3
}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2140      	movs	r1, #64	; 0x40
 80029ac:	438a      	bics	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	183b      	adds	r3, r7, r0
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029b8:	f383 8810 	msr	PRIMASK, r3
}
 80029bc:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2280      	movs	r2, #128	; 0x80
 80029c2:	589b      	ldr	r3, [r3, r2]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d016      	beq.n	80029f6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	589b      	ldr	r3, [r3, r2]
 80029ce:	4a17      	ldr	r2, [pc, #92]	; (8002a2c <HAL_UART_IRQHandler+0x2c8>)
 80029d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2280      	movs	r2, #128	; 0x80
 80029d6:	589b      	ldr	r3, [r3, r2]
 80029d8:	0018      	movs	r0, r3
 80029da:	f7fe fc37 	bl	800124c <HAL_DMA_Abort_IT>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d01c      	beq.n	8002a1c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2280      	movs	r2, #128	; 0x80
 80029e6:	589b      	ldr	r3, [r3, r2]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	5852      	ldr	r2, [r2, r1]
 80029f0:	0010      	movs	r0, r2
 80029f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f4:	e012      	b.n	8002a1c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	0018      	movs	r0, r3
 80029fa:	f000 f9f1 	bl	8002de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fe:	e00d      	b.n	8002a1c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 f9ec 	bl	8002de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a08:	e008      	b.n	8002a1c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f000 f9e7 	bl	8002de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2290      	movs	r2, #144	; 0x90
 8002a16:	2100      	movs	r1, #0
 8002a18:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002a1a:	e1b9      	b.n	8002d90 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1c:	46c0      	nop			; (mov r8, r8)
    return;
 8002a1e:	e1b7      	b.n	8002d90 <HAL_UART_IRQHandler+0x62c>
 8002a20:	0000080f 	.word	0x0000080f
 8002a24:	10000001 	.word	0x10000001
 8002a28:	04000120 	.word	0x04000120
 8002a2c:	08003b05 	.word	0x08003b05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d000      	beq.n	8002a3a <HAL_UART_IRQHandler+0x2d6>
 8002a38:	e13e      	b.n	8002cb8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a3a:	23a4      	movs	r3, #164	; 0xa4
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2210      	movs	r2, #16
 8002a42:	4013      	ands	r3, r2
 8002a44:	d100      	bne.n	8002a48 <HAL_UART_IRQHandler+0x2e4>
 8002a46:	e137      	b.n	8002cb8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a48:	23a0      	movs	r3, #160	; 0xa0
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2210      	movs	r2, #16
 8002a50:	4013      	ands	r3, r2
 8002a52:	d100      	bne.n	8002a56 <HAL_UART_IRQHandler+0x2f2>
 8002a54:	e130      	b.n	8002cb8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2210      	movs	r2, #16
 8002a5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2240      	movs	r2, #64	; 0x40
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	d000      	beq.n	8002a6e <HAL_UART_IRQHandler+0x30a>
 8002a6c:	e0a4      	b.n	8002bb8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2280      	movs	r2, #128	; 0x80
 8002a72:	589b      	ldr	r3, [r3, r2]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	217e      	movs	r1, #126	; 0x7e
 8002a7a:	187b      	adds	r3, r7, r1
 8002a7c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002a7e:	187b      	adds	r3, r7, r1
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d100      	bne.n	8002a88 <HAL_UART_IRQHandler+0x324>
 8002a86:	e185      	b.n	8002d94 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	225c      	movs	r2, #92	; 0x5c
 8002a8c:	5a9b      	ldrh	r3, [r3, r2]
 8002a8e:	187a      	adds	r2, r7, r1
 8002a90:	8812      	ldrh	r2, [r2, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d300      	bcc.n	8002a98 <HAL_UART_IRQHandler+0x334>
 8002a96:	e17d      	b.n	8002d94 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	187a      	adds	r2, r7, r1
 8002a9c:	215e      	movs	r1, #94	; 0x5e
 8002a9e:	8812      	ldrh	r2, [r2, #0]
 8002aa0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	589b      	ldr	r3, [r3, r2]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2220      	movs	r2, #32
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d170      	bne.n	8002b94 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ab6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002aba:	67bb      	str	r3, [r7, #120]	; 0x78
 8002abc:	2301      	movs	r3, #1
 8002abe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac2:	f383 8810 	msr	PRIMASK, r3
}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	49b4      	ldr	r1, [pc, #720]	; (8002da4 <HAL_UART_IRQHandler+0x640>)
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ada:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ade:	f383 8810 	msr	PRIMASK, r3
}
 8002ae2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aec:	677b      	str	r3, [r7, #116]	; 0x74
 8002aee:	2301      	movs	r3, #1
 8002af0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af4:	f383 8810 	msr	PRIMASK, r3
}
 8002af8:	46c0      	nop			; (mov r8, r8)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2101      	movs	r1, #1
 8002b06:	438a      	bics	r2, r1
 8002b08:	609a      	str	r2, [r3, #8]
 8002b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b0c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b10:	f383 8810 	msr	PRIMASK, r3
}
 8002b14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b16:	f3ef 8310 	mrs	r3, PRIMASK
 8002b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b1e:	673b      	str	r3, [r7, #112]	; 0x70
 8002b20:	2301      	movs	r3, #1
 8002b22:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b26:	f383 8810 	msr	PRIMASK, r3
}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2140      	movs	r1, #64	; 0x40
 8002b38:	438a      	bics	r2, r1
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b3e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b42:	f383 8810 	msr	PRIMASK, r3
}
 8002b46:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	228c      	movs	r2, #140	; 0x8c
 8002b4c:	2120      	movs	r1, #32
 8002b4e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b56:	f3ef 8310 	mrs	r3, PRIMASK
 8002b5a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b60:	2301      	movs	r3, #1
 8002b62:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b66:	f383 8810 	msr	PRIMASK, r3
}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2110      	movs	r1, #16
 8002b78:	438a      	bics	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b82:	f383 8810 	msr	PRIMASK, r3
}
 8002b86:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2280      	movs	r2, #128	; 0x80
 8002b8c:	589b      	ldr	r3, [r3, r2]
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f7fe fafa 	bl	8001188 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	225c      	movs	r2, #92	; 0x5c
 8002b9e:	5a9a      	ldrh	r2, [r3, r2]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	215e      	movs	r1, #94	; 0x5e
 8002ba4:	5a5b      	ldrh	r3, [r3, r1]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	0011      	movs	r1, r2
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f7fd fe7b 	bl	80008ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bb6:	e0ed      	b.n	8002d94 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	225c      	movs	r2, #92	; 0x5c
 8002bbc:	5a99      	ldrh	r1, [r3, r2]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	225e      	movs	r2, #94	; 0x5e
 8002bc2:	5a9b      	ldrh	r3, [r3, r2]
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	208e      	movs	r0, #142	; 0x8e
 8002bc8:	183b      	adds	r3, r7, r0
 8002bca:	1a8a      	subs	r2, r1, r2
 8002bcc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	225e      	movs	r2, #94	; 0x5e
 8002bd2:	5a9b      	ldrh	r3, [r3, r2]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d100      	bne.n	8002bdc <HAL_UART_IRQHandler+0x478>
 8002bda:	e0dd      	b.n	8002d98 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002bdc:	183b      	adds	r3, r7, r0
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d100      	bne.n	8002be6 <HAL_UART_IRQHandler+0x482>
 8002be4:	e0d8      	b.n	8002d98 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bea:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bec:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bee:	2488      	movs	r4, #136	; 0x88
 8002bf0:	193a      	adds	r2, r7, r4
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f383 8810 	msr	PRIMASK, r3
}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4967      	ldr	r1, [pc, #412]	; (8002da8 <HAL_UART_IRQHandler+0x644>)
 8002c0c:	400a      	ands	r2, r1
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	193b      	adds	r3, r7, r4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f383 8810 	msr	PRIMASK, r3
}
 8002c1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c22:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c24:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c26:	2484      	movs	r4, #132	; 0x84
 8002c28:	193a      	adds	r2, r7, r4
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f383 8810 	msr	PRIMASK, r3
}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	495a      	ldr	r1, [pc, #360]	; (8002dac <HAL_UART_IRQHandler+0x648>)
 8002c44:	400a      	ands	r2, r1
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	193b      	adds	r3, r7, r4
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	f383 8810 	msr	PRIMASK, r3
}
 8002c54:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	228c      	movs	r2, #140	; 0x8c
 8002c5a:	2120      	movs	r1, #32
 8002c5c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c72:	2480      	movs	r4, #128	; 0x80
 8002c74:	193a      	adds	r2, r7, r4
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	2301      	movs	r3, #1
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	f383 8810 	msr	PRIMASK, r3
}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2110      	movs	r1, #16
 8002c90:	438a      	bics	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	193b      	adds	r3, r7, r4
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ca0:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ca8:	183b      	adds	r3, r7, r0
 8002caa:	881a      	ldrh	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	0011      	movs	r1, r2
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f7fd fdfb 	bl	80008ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cb6:	e06f      	b.n	8002d98 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002cb8:	23a4      	movs	r3, #164	; 0xa4
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	035b      	lsls	r3, r3, #13
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d010      	beq.n	8002ce8 <HAL_UART_IRQHandler+0x584>
 8002cc6:	239c      	movs	r3, #156	; 0x9c
 8002cc8:	18fb      	adds	r3, r7, r3
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	03db      	lsls	r3, r3, #15
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d009      	beq.n	8002ce8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2280      	movs	r2, #128	; 0x80
 8002cda:	0352      	lsls	r2, r2, #13
 8002cdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f000 ff52 	bl	8003b8a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ce6:	e05a      	b.n	8002d9e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002ce8:	23a4      	movs	r3, #164	; 0xa4
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d016      	beq.n	8002d22 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cf4:	23a0      	movs	r3, #160	; 0xa0
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2280      	movs	r2, #128	; 0x80
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d106      	bne.n	8002d0e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002d00:	239c      	movs	r3, #156	; 0x9c
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	041b      	lsls	r3, r3, #16
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d009      	beq.n	8002d22 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d042      	beq.n	8002d9c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	0010      	movs	r0, r2
 8002d1e:	4798      	blx	r3
    }
    return;
 8002d20:	e03c      	b.n	8002d9c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d22:	23a4      	movs	r3, #164	; 0xa4
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2240      	movs	r2, #64	; 0x40
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d00a      	beq.n	8002d44 <HAL_UART_IRQHandler+0x5e0>
 8002d2e:	23a0      	movs	r3, #160	; 0xa0
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2240      	movs	r2, #64	; 0x40
 8002d36:	4013      	ands	r3, r2
 8002d38:	d004      	beq.n	8002d44 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 fef8 	bl	8003b32 <UART_EndTransmit_IT>
    return;
 8002d42:	e02c      	b.n	8002d9e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d44:	23a4      	movs	r3, #164	; 0xa4
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	041b      	lsls	r3, r3, #16
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d00b      	beq.n	8002d6a <HAL_UART_IRQHandler+0x606>
 8002d52:	23a0      	movs	r3, #160	; 0xa0
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	05db      	lsls	r3, r3, #23
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d004      	beq.n	8002d6a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	0018      	movs	r0, r3
 8002d64:	f000 ff21 	bl	8003baa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d68:	e019      	b.n	8002d9e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d6a:	23a4      	movs	r3, #164	; 0xa4
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	045b      	lsls	r3, r3, #17
 8002d74:	4013      	ands	r3, r2
 8002d76:	d012      	beq.n	8002d9e <HAL_UART_IRQHandler+0x63a>
 8002d78:	23a0      	movs	r3, #160	; 0xa0
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	da0d      	bge.n	8002d9e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f000 ff08 	bl	8003b9a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d8a:	e008      	b.n	8002d9e <HAL_UART_IRQHandler+0x63a>
      return;
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	e006      	b.n	8002d9e <HAL_UART_IRQHandler+0x63a>
    return;
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	e004      	b.n	8002d9e <HAL_UART_IRQHandler+0x63a>
      return;
 8002d94:	46c0      	nop			; (mov r8, r8)
 8002d96:	e002      	b.n	8002d9e <HAL_UART_IRQHandler+0x63a>
      return;
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	e000      	b.n	8002d9e <HAL_UART_IRQHandler+0x63a>
    return;
 8002d9c:	46c0      	nop			; (mov r8, r8)
  }
}
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b02a      	add	sp, #168	; 0xa8
 8002da2:	bdb0      	pop	{r4, r5, r7, pc}
 8002da4:	fffffeff 	.word	0xfffffeff
 8002da8:	fffffedf 	.word	0xfffffedf
 8002dac:	effffffe 	.word	0xeffffffe

08002db0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002db8:	46c0      	nop			; (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b002      	add	sp, #8
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002dd8:	46c0      	nop			; (mov r8, r8)
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b002      	add	sp, #8
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b002      	add	sp, #8
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df0:	b5b0      	push	{r4, r5, r7, lr}
 8002df2:	b090      	sub	sp, #64	; 0x40
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002df8:	231a      	movs	r3, #26
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	189b      	adds	r3, r3, r2
 8002dfe:	19db      	adds	r3, r3, r7
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4ac4      	ldr	r2, [pc, #784]	; (8003134 <UART_SetConfig+0x344>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	0019      	movs	r1, r3
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4abf      	ldr	r2, [pc, #764]	; (8003138 <UART_SetConfig+0x348>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	68d9      	ldr	r1, [r3, #12]
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	0003      	movs	r3, r0
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4ab9      	ldr	r2, [pc, #740]	; (800313c <UART_SetConfig+0x34c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d004      	beq.n	8002e66 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e62:	4313      	orrs	r3, r2
 8002e64:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	4ab4      	ldr	r2, [pc, #720]	; (8003140 <UART_SetConfig+0x350>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	0019      	movs	r1, r3
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e82:	220f      	movs	r2, #15
 8002e84:	4393      	bics	r3, r2
 8002e86:	0018      	movs	r0, r3
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	0003      	movs	r3, r0
 8002e92:	430b      	orrs	r3, r1
 8002e94:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4aaa      	ldr	r2, [pc, #680]	; (8003144 <UART_SetConfig+0x354>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d131      	bne.n	8002f04 <UART_SetConfig+0x114>
 8002ea0:	4ba9      	ldr	r3, [pc, #676]	; (8003148 <UART_SetConfig+0x358>)
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d01d      	beq.n	8002ee8 <UART_SetConfig+0xf8>
 8002eac:	d823      	bhi.n	8002ef6 <UART_SetConfig+0x106>
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d00c      	beq.n	8002ecc <UART_SetConfig+0xdc>
 8002eb2:	d820      	bhi.n	8002ef6 <UART_SetConfig+0x106>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <UART_SetConfig+0xce>
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d00e      	beq.n	8002eda <UART_SetConfig+0xea>
 8002ebc:	e01b      	b.n	8002ef6 <UART_SetConfig+0x106>
 8002ebe:	231b      	movs	r3, #27
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	189b      	adds	r3, r3, r2
 8002ec4:	19db      	adds	r3, r3, r7
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	e071      	b.n	8002fb0 <UART_SetConfig+0x1c0>
 8002ecc:	231b      	movs	r3, #27
 8002ece:	2220      	movs	r2, #32
 8002ed0:	189b      	adds	r3, r3, r2
 8002ed2:	19db      	adds	r3, r3, r7
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	701a      	strb	r2, [r3, #0]
 8002ed8:	e06a      	b.n	8002fb0 <UART_SetConfig+0x1c0>
 8002eda:	231b      	movs	r3, #27
 8002edc:	2220      	movs	r2, #32
 8002ede:	189b      	adds	r3, r3, r2
 8002ee0:	19db      	adds	r3, r3, r7
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	701a      	strb	r2, [r3, #0]
 8002ee6:	e063      	b.n	8002fb0 <UART_SetConfig+0x1c0>
 8002ee8:	231b      	movs	r3, #27
 8002eea:	2220      	movs	r2, #32
 8002eec:	189b      	adds	r3, r3, r2
 8002eee:	19db      	adds	r3, r3, r7
 8002ef0:	2208      	movs	r2, #8
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	e05c      	b.n	8002fb0 <UART_SetConfig+0x1c0>
 8002ef6:	231b      	movs	r3, #27
 8002ef8:	2220      	movs	r2, #32
 8002efa:	189b      	adds	r3, r3, r2
 8002efc:	19db      	adds	r3, r3, r7
 8002efe:	2210      	movs	r2, #16
 8002f00:	701a      	strb	r2, [r3, #0]
 8002f02:	e055      	b.n	8002fb0 <UART_SetConfig+0x1c0>
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a90      	ldr	r2, [pc, #576]	; (800314c <UART_SetConfig+0x35c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d106      	bne.n	8002f1c <UART_SetConfig+0x12c>
 8002f0e:	231b      	movs	r3, #27
 8002f10:	2220      	movs	r2, #32
 8002f12:	189b      	adds	r3, r3, r2
 8002f14:	19db      	adds	r3, r3, r7
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e049      	b.n	8002fb0 <UART_SetConfig+0x1c0>
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a86      	ldr	r2, [pc, #536]	; (800313c <UART_SetConfig+0x34c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d13e      	bne.n	8002fa4 <UART_SetConfig+0x1b4>
 8002f26:	4b88      	ldr	r3, [pc, #544]	; (8003148 <UART_SetConfig+0x358>)
 8002f28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f2a:	23c0      	movs	r3, #192	; 0xc0
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	4013      	ands	r3, r2
 8002f30:	22c0      	movs	r2, #192	; 0xc0
 8002f32:	0112      	lsls	r2, r2, #4
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d027      	beq.n	8002f88 <UART_SetConfig+0x198>
 8002f38:	22c0      	movs	r2, #192	; 0xc0
 8002f3a:	0112      	lsls	r2, r2, #4
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d82a      	bhi.n	8002f96 <UART_SetConfig+0x1a6>
 8002f40:	2280      	movs	r2, #128	; 0x80
 8002f42:	0112      	lsls	r2, r2, #4
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d011      	beq.n	8002f6c <UART_SetConfig+0x17c>
 8002f48:	2280      	movs	r2, #128	; 0x80
 8002f4a:	0112      	lsls	r2, r2, #4
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d822      	bhi.n	8002f96 <UART_SetConfig+0x1a6>
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d004      	beq.n	8002f5e <UART_SetConfig+0x16e>
 8002f54:	2280      	movs	r2, #128	; 0x80
 8002f56:	00d2      	lsls	r2, r2, #3
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00e      	beq.n	8002f7a <UART_SetConfig+0x18a>
 8002f5c:	e01b      	b.n	8002f96 <UART_SetConfig+0x1a6>
 8002f5e:	231b      	movs	r3, #27
 8002f60:	2220      	movs	r2, #32
 8002f62:	189b      	adds	r3, r3, r2
 8002f64:	19db      	adds	r3, r3, r7
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	e021      	b.n	8002fb0 <UART_SetConfig+0x1c0>
 8002f6c:	231b      	movs	r3, #27
 8002f6e:	2220      	movs	r2, #32
 8002f70:	189b      	adds	r3, r3, r2
 8002f72:	19db      	adds	r3, r3, r7
 8002f74:	2202      	movs	r2, #2
 8002f76:	701a      	strb	r2, [r3, #0]
 8002f78:	e01a      	b.n	8002fb0 <UART_SetConfig+0x1c0>
 8002f7a:	231b      	movs	r3, #27
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	189b      	adds	r3, r3, r2
 8002f80:	19db      	adds	r3, r3, r7
 8002f82:	2204      	movs	r2, #4
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	e013      	b.n	8002fb0 <UART_SetConfig+0x1c0>
 8002f88:	231b      	movs	r3, #27
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	189b      	adds	r3, r3, r2
 8002f8e:	19db      	adds	r3, r3, r7
 8002f90:	2208      	movs	r2, #8
 8002f92:	701a      	strb	r2, [r3, #0]
 8002f94:	e00c      	b.n	8002fb0 <UART_SetConfig+0x1c0>
 8002f96:	231b      	movs	r3, #27
 8002f98:	2220      	movs	r2, #32
 8002f9a:	189b      	adds	r3, r3, r2
 8002f9c:	19db      	adds	r3, r3, r7
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	701a      	strb	r2, [r3, #0]
 8002fa2:	e005      	b.n	8002fb0 <UART_SetConfig+0x1c0>
 8002fa4:	231b      	movs	r3, #27
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	189b      	adds	r3, r3, r2
 8002faa:	19db      	adds	r3, r3, r7
 8002fac:	2210      	movs	r2, #16
 8002fae:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a61      	ldr	r2, [pc, #388]	; (800313c <UART_SetConfig+0x34c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d000      	beq.n	8002fbc <UART_SetConfig+0x1cc>
 8002fba:	e092      	b.n	80030e2 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fbc:	231b      	movs	r3, #27
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	189b      	adds	r3, r3, r2
 8002fc2:	19db      	adds	r3, r3, r7
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d015      	beq.n	8002ff6 <UART_SetConfig+0x206>
 8002fca:	dc18      	bgt.n	8002ffe <UART_SetConfig+0x20e>
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d00d      	beq.n	8002fec <UART_SetConfig+0x1fc>
 8002fd0:	dc15      	bgt.n	8002ffe <UART_SetConfig+0x20e>
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <UART_SetConfig+0x1ec>
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d005      	beq.n	8002fe6 <UART_SetConfig+0x1f6>
 8002fda:	e010      	b.n	8002ffe <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fdc:	f7ff f940 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fe4:	e014      	b.n	8003010 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fe6:	4b5a      	ldr	r3, [pc, #360]	; (8003150 <UART_SetConfig+0x360>)
 8002fe8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fea:	e011      	b.n	8003010 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fec:	f7ff f8ac 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ff4:	e00c      	b.n	8003010 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ffc:	e008      	b.n	8003010 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003002:	231a      	movs	r3, #26
 8003004:	2220      	movs	r2, #32
 8003006:	189b      	adds	r3, r3, r2
 8003008:	19db      	adds	r3, r3, r7
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
        break;
 800300e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003012:	2b00      	cmp	r3, #0
 8003014:	d100      	bne.n	8003018 <UART_SetConfig+0x228>
 8003016:	e147      	b.n	80032a8 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800301c:	4b4d      	ldr	r3, [pc, #308]	; (8003154 <UART_SetConfig+0x364>)
 800301e:	0052      	lsls	r2, r2, #1
 8003020:	5ad3      	ldrh	r3, [r2, r3]
 8003022:	0019      	movs	r1, r3
 8003024:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003026:	f7fd f875 	bl	8000114 <__udivsi3>
 800302a:	0003      	movs	r3, r0
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	0013      	movs	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	189b      	adds	r3, r3, r2
 8003038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800303a:	429a      	cmp	r2, r3
 800303c:	d305      	bcc.n	800304a <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003046:	429a      	cmp	r2, r3
 8003048:	d906      	bls.n	8003058 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800304a:	231a      	movs	r3, #26
 800304c:	2220      	movs	r2, #32
 800304e:	189b      	adds	r3, r3, r2
 8003050:	19db      	adds	r3, r3, r7
 8003052:	2201      	movs	r2, #1
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	e127      	b.n	80032a8 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003064:	4b3b      	ldr	r3, [pc, #236]	; (8003154 <UART_SetConfig+0x364>)
 8003066:	0052      	lsls	r2, r2, #1
 8003068:	5ad3      	ldrh	r3, [r2, r3]
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	69b8      	ldr	r0, [r7, #24]
 8003076:	69f9      	ldr	r1, [r7, #28]
 8003078:	f7fd f9c2 	bl	8000400 <__aeabi_uldivmod>
 800307c:	0002      	movs	r2, r0
 800307e:	000b      	movs	r3, r1
 8003080:	0e11      	lsrs	r1, r2, #24
 8003082:	021d      	lsls	r5, r3, #8
 8003084:	430d      	orrs	r5, r1
 8003086:	0214      	lsls	r4, r2, #8
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68b8      	ldr	r0, [r7, #8]
 8003096:	68f9      	ldr	r1, [r7, #12]
 8003098:	1900      	adds	r0, r0, r4
 800309a:	4169      	adcs	r1, r5
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	2300      	movs	r3, #0
 80030a4:	607b      	str	r3, [r7, #4]
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f7fd f9a9 	bl	8000400 <__aeabi_uldivmod>
 80030ae:	0002      	movs	r2, r0
 80030b0:	000b      	movs	r3, r1
 80030b2:	0013      	movs	r3, r2
 80030b4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030b8:	23c0      	movs	r3, #192	; 0xc0
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	429a      	cmp	r2, r3
 80030be:	d309      	bcc.n	80030d4 <UART_SetConfig+0x2e4>
 80030c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	035b      	lsls	r3, r3, #13
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d204      	bcs.n	80030d4 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	e0e9      	b.n	80032a8 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80030d4:	231a      	movs	r3, #26
 80030d6:	2220      	movs	r2, #32
 80030d8:	189b      	adds	r3, r3, r2
 80030da:	19db      	adds	r3, r3, r7
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	e0e2      	b.n	80032a8 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	69da      	ldr	r2, [r3, #28]
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d000      	beq.n	80030f0 <UART_SetConfig+0x300>
 80030ee:	e083      	b.n	80031f8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80030f0:	231b      	movs	r3, #27
 80030f2:	2220      	movs	r2, #32
 80030f4:	189b      	adds	r3, r3, r2
 80030f6:	19db      	adds	r3, r3, r7
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d015      	beq.n	800312a <UART_SetConfig+0x33a>
 80030fe:	dc2b      	bgt.n	8003158 <UART_SetConfig+0x368>
 8003100:	2b04      	cmp	r3, #4
 8003102:	d00d      	beq.n	8003120 <UART_SetConfig+0x330>
 8003104:	dc28      	bgt.n	8003158 <UART_SetConfig+0x368>
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <UART_SetConfig+0x320>
 800310a:	2b02      	cmp	r3, #2
 800310c:	d005      	beq.n	800311a <UART_SetConfig+0x32a>
 800310e:	e023      	b.n	8003158 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003110:	f7ff f8a6 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003114:	0003      	movs	r3, r0
 8003116:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003118:	e027      	b.n	800316a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <UART_SetConfig+0x360>)
 800311c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800311e:	e024      	b.n	800316a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003120:	f7ff f812 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8003124:	0003      	movs	r3, r0
 8003126:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003128:	e01f      	b.n	800316a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003130:	e01b      	b.n	800316a <UART_SetConfig+0x37a>
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	cfff69f3 	.word	0xcfff69f3
 8003138:	ffffcfff 	.word	0xffffcfff
 800313c:	40008000 	.word	0x40008000
 8003140:	11fff4ff 	.word	0x11fff4ff
 8003144:	40013800 	.word	0x40013800
 8003148:	40021000 	.word	0x40021000
 800314c:	40004400 	.word	0x40004400
 8003150:	00f42400 	.word	0x00f42400
 8003154:	08003f90 	.word	0x08003f90
      default:
        pclk = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800315c:	231a      	movs	r3, #26
 800315e:	2220      	movs	r2, #32
 8003160:	189b      	adds	r3, r3, r2
 8003162:	19db      	adds	r3, r3, r7
 8003164:	2201      	movs	r2, #1
 8003166:	701a      	strb	r2, [r3, #0]
        break;
 8003168:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800316a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316c:	2b00      	cmp	r3, #0
 800316e:	d100      	bne.n	8003172 <UART_SetConfig+0x382>
 8003170:	e09a      	b.n	80032a8 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003176:	4b58      	ldr	r3, [pc, #352]	; (80032d8 <UART_SetConfig+0x4e8>)
 8003178:	0052      	lsls	r2, r2, #1
 800317a:	5ad3      	ldrh	r3, [r2, r3]
 800317c:	0019      	movs	r1, r3
 800317e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003180:	f7fc ffc8 	bl	8000114 <__udivsi3>
 8003184:	0003      	movs	r3, r0
 8003186:	005a      	lsls	r2, r3, #1
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	18d2      	adds	r2, r2, r3
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	0019      	movs	r1, r3
 8003196:	0010      	movs	r0, r2
 8003198:	f7fc ffbc 	bl	8000114 <__udivsi3>
 800319c:	0003      	movs	r3, r0
 800319e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	2b0f      	cmp	r3, #15
 80031a4:	d921      	bls.n	80031ea <UART_SetConfig+0x3fa>
 80031a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	025b      	lsls	r3, r3, #9
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d21c      	bcs.n	80031ea <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	200e      	movs	r0, #14
 80031b6:	2420      	movs	r4, #32
 80031b8:	1903      	adds	r3, r0, r4
 80031ba:	19db      	adds	r3, r3, r7
 80031bc:	210f      	movs	r1, #15
 80031be:	438a      	bics	r2, r1
 80031c0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2207      	movs	r2, #7
 80031ca:	4013      	ands	r3, r2
 80031cc:	b299      	uxth	r1, r3
 80031ce:	1903      	adds	r3, r0, r4
 80031d0:	19db      	adds	r3, r3, r7
 80031d2:	1902      	adds	r2, r0, r4
 80031d4:	19d2      	adds	r2, r2, r7
 80031d6:	8812      	ldrh	r2, [r2, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	1902      	adds	r2, r0, r4
 80031e2:	19d2      	adds	r2, r2, r7
 80031e4:	8812      	ldrh	r2, [r2, #0]
 80031e6:	60da      	str	r2, [r3, #12]
 80031e8:	e05e      	b.n	80032a8 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80031ea:	231a      	movs	r3, #26
 80031ec:	2220      	movs	r2, #32
 80031ee:	189b      	adds	r3, r3, r2
 80031f0:	19db      	adds	r3, r3, r7
 80031f2:	2201      	movs	r2, #1
 80031f4:	701a      	strb	r2, [r3, #0]
 80031f6:	e057      	b.n	80032a8 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031f8:	231b      	movs	r3, #27
 80031fa:	2220      	movs	r2, #32
 80031fc:	189b      	adds	r3, r3, r2
 80031fe:	19db      	adds	r3, r3, r7
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b08      	cmp	r3, #8
 8003204:	d015      	beq.n	8003232 <UART_SetConfig+0x442>
 8003206:	dc18      	bgt.n	800323a <UART_SetConfig+0x44a>
 8003208:	2b04      	cmp	r3, #4
 800320a:	d00d      	beq.n	8003228 <UART_SetConfig+0x438>
 800320c:	dc15      	bgt.n	800323a <UART_SetConfig+0x44a>
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <UART_SetConfig+0x428>
 8003212:	2b02      	cmp	r3, #2
 8003214:	d005      	beq.n	8003222 <UART_SetConfig+0x432>
 8003216:	e010      	b.n	800323a <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003218:	f7ff f822 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 800321c:	0003      	movs	r3, r0
 800321e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003220:	e014      	b.n	800324c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003222:	4b2e      	ldr	r3, [pc, #184]	; (80032dc <UART_SetConfig+0x4ec>)
 8003224:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003226:	e011      	b.n	800324c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003228:	f7fe ff8e 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 800322c:	0003      	movs	r3, r0
 800322e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003230:	e00c      	b.n	800324c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003232:	2380      	movs	r3, #128	; 0x80
 8003234:	021b      	lsls	r3, r3, #8
 8003236:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003238:	e008      	b.n	800324c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800323e:	231a      	movs	r3, #26
 8003240:	2220      	movs	r2, #32
 8003242:	189b      	adds	r3, r3, r2
 8003244:	19db      	adds	r3, r3, r7
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
        break;
 800324a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800324c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324e:	2b00      	cmp	r3, #0
 8003250:	d02a      	beq.n	80032a8 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003256:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <UART_SetConfig+0x4e8>)
 8003258:	0052      	lsls	r2, r2, #1
 800325a:	5ad3      	ldrh	r3, [r2, r3]
 800325c:	0019      	movs	r1, r3
 800325e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003260:	f7fc ff58 	bl	8000114 <__udivsi3>
 8003264:	0003      	movs	r3, r0
 8003266:	001a      	movs	r2, r3
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	085b      	lsrs	r3, r3, #1
 800326e:	18d2      	adds	r2, r2, r3
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	0019      	movs	r1, r3
 8003276:	0010      	movs	r0, r2
 8003278:	f7fc ff4c 	bl	8000114 <__udivsi3>
 800327c:	0003      	movs	r3, r0
 800327e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	2b0f      	cmp	r3, #15
 8003284:	d90a      	bls.n	800329c <UART_SetConfig+0x4ac>
 8003286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	025b      	lsls	r3, r3, #9
 800328c:	429a      	cmp	r2, r3
 800328e:	d205      	bcs.n	800329c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003292:	b29a      	uxth	r2, r3
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	e005      	b.n	80032a8 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800329c:	231a      	movs	r3, #26
 800329e:	2220      	movs	r2, #32
 80032a0:	189b      	adds	r3, r3, r2
 80032a2:	19db      	adds	r3, r3, r7
 80032a4:	2201      	movs	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	226a      	movs	r2, #106	; 0x6a
 80032ac:	2101      	movs	r1, #1
 80032ae:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	2268      	movs	r2, #104	; 0x68
 80032b4:	2101      	movs	r1, #1
 80032b6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	2200      	movs	r2, #0
 80032bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	2200      	movs	r2, #0
 80032c2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80032c4:	231a      	movs	r3, #26
 80032c6:	2220      	movs	r2, #32
 80032c8:	189b      	adds	r3, r3, r2
 80032ca:	19db      	adds	r3, r3, r7
 80032cc:	781b      	ldrb	r3, [r3, #0]
}
 80032ce:	0018      	movs	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b010      	add	sp, #64	; 0x40
 80032d4:	bdb0      	pop	{r4, r5, r7, pc}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	08003f90 	.word	0x08003f90
 80032dc:	00f42400 	.word	0x00f42400

080032e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	2201      	movs	r2, #1
 80032ee:	4013      	ands	r3, r2
 80032f0:	d00b      	beq.n	800330a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a4a      	ldr	r2, [pc, #296]	; (8003424 <UART_AdvFeatureConfig+0x144>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	0019      	movs	r1, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	2202      	movs	r2, #2
 8003310:	4013      	ands	r3, r2
 8003312:	d00b      	beq.n	800332c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4a43      	ldr	r2, [pc, #268]	; (8003428 <UART_AdvFeatureConfig+0x148>)
 800331c:	4013      	ands	r3, r2
 800331e:	0019      	movs	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	2204      	movs	r2, #4
 8003332:	4013      	ands	r3, r2
 8003334:	d00b      	beq.n	800334e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4a3b      	ldr	r2, [pc, #236]	; (800342c <UART_AdvFeatureConfig+0x14c>)
 800333e:	4013      	ands	r3, r2
 8003340:	0019      	movs	r1, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	2208      	movs	r2, #8
 8003354:	4013      	ands	r3, r2
 8003356:	d00b      	beq.n	8003370 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	4a34      	ldr	r2, [pc, #208]	; (8003430 <UART_AdvFeatureConfig+0x150>)
 8003360:	4013      	ands	r3, r2
 8003362:	0019      	movs	r1, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	2210      	movs	r2, #16
 8003376:	4013      	ands	r3, r2
 8003378:	d00b      	beq.n	8003392 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a2c      	ldr	r2, [pc, #176]	; (8003434 <UART_AdvFeatureConfig+0x154>)
 8003382:	4013      	ands	r3, r2
 8003384:	0019      	movs	r1, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	2220      	movs	r2, #32
 8003398:	4013      	ands	r3, r2
 800339a:	d00b      	beq.n	80033b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	4a25      	ldr	r2, [pc, #148]	; (8003438 <UART_AdvFeatureConfig+0x158>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	0019      	movs	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	2240      	movs	r2, #64	; 0x40
 80033ba:	4013      	ands	r3, r2
 80033bc:	d01d      	beq.n	80033fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4a1d      	ldr	r2, [pc, #116]	; (800343c <UART_AdvFeatureConfig+0x15c>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	0019      	movs	r1, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	035b      	lsls	r3, r3, #13
 80033de:	429a      	cmp	r2, r3
 80033e0:	d10b      	bne.n	80033fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	4a15      	ldr	r2, [pc, #84]	; (8003440 <UART_AdvFeatureConfig+0x160>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	0019      	movs	r1, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	2280      	movs	r2, #128	; 0x80
 8003400:	4013      	ands	r3, r2
 8003402:	d00b      	beq.n	800341c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4a0e      	ldr	r2, [pc, #56]	; (8003444 <UART_AdvFeatureConfig+0x164>)
 800340c:	4013      	ands	r3, r2
 800340e:	0019      	movs	r1, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	605a      	str	r2, [r3, #4]
  }
}
 800341c:	46c0      	nop			; (mov r8, r8)
 800341e:	46bd      	mov	sp, r7
 8003420:	b002      	add	sp, #8
 8003422:	bd80      	pop	{r7, pc}
 8003424:	fffdffff 	.word	0xfffdffff
 8003428:	fffeffff 	.word	0xfffeffff
 800342c:	fffbffff 	.word	0xfffbffff
 8003430:	ffff7fff 	.word	0xffff7fff
 8003434:	ffffefff 	.word	0xffffefff
 8003438:	ffffdfff 	.word	0xffffdfff
 800343c:	ffefffff 	.word	0xffefffff
 8003440:	ff9fffff 	.word	0xff9fffff
 8003444:	fff7ffff 	.word	0xfff7ffff

08003448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af02      	add	r7, sp, #8
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2290      	movs	r2, #144	; 0x90
 8003454:	2100      	movs	r1, #0
 8003456:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003458:	f7fd fc7a 	bl	8000d50 <HAL_GetTick>
 800345c:	0003      	movs	r3, r0
 800345e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2208      	movs	r2, #8
 8003468:	4013      	ands	r3, r2
 800346a:	2b08      	cmp	r3, #8
 800346c:	d10c      	bne.n	8003488 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2280      	movs	r2, #128	; 0x80
 8003472:	0391      	lsls	r1, r2, #14
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4a1a      	ldr	r2, [pc, #104]	; (80034e0 <UART_CheckIdleState+0x98>)
 8003478:	9200      	str	r2, [sp, #0]
 800347a:	2200      	movs	r2, #0
 800347c:	f000 f832 	bl	80034e4 <UART_WaitOnFlagUntilTimeout>
 8003480:	1e03      	subs	r3, r0, #0
 8003482:	d001      	beq.n	8003488 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e026      	b.n	80034d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2204      	movs	r2, #4
 8003490:	4013      	ands	r3, r2
 8003492:	2b04      	cmp	r3, #4
 8003494:	d10c      	bne.n	80034b0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	03d1      	lsls	r1, r2, #15
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4a10      	ldr	r2, [pc, #64]	; (80034e0 <UART_CheckIdleState+0x98>)
 80034a0:	9200      	str	r2, [sp, #0]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f000 f81e 	bl	80034e4 <UART_WaitOnFlagUntilTimeout>
 80034a8:	1e03      	subs	r3, r0, #0
 80034aa:	d001      	beq.n	80034b0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e012      	b.n	80034d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2288      	movs	r2, #136	; 0x88
 80034b4:	2120      	movs	r1, #32
 80034b6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	228c      	movs	r2, #140	; 0x8c
 80034bc:	2120      	movs	r1, #32
 80034be:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2284      	movs	r2, #132	; 0x84
 80034d0:	2100      	movs	r1, #0
 80034d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	0018      	movs	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	b004      	add	sp, #16
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	01ffffff 	.word	0x01ffffff

080034e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b094      	sub	sp, #80	; 0x50
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	1dfb      	adds	r3, r7, #7
 80034f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f4:	e0a7      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034f8:	3301      	adds	r3, #1
 80034fa:	d100      	bne.n	80034fe <UART_WaitOnFlagUntilTimeout+0x1a>
 80034fc:	e0a3      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fe:	f7fd fc27 	bl	8000d50 <HAL_GetTick>
 8003502:	0002      	movs	r2, r0
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800350a:	429a      	cmp	r2, r3
 800350c:	d302      	bcc.n	8003514 <UART_WaitOnFlagUntilTimeout+0x30>
 800350e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003510:	2b00      	cmp	r3, #0
 8003512:	d13f      	bne.n	8003594 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003514:	f3ef 8310 	mrs	r3, PRIMASK
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800351c:	647b      	str	r3, [r7, #68]	; 0x44
 800351e:	2301      	movs	r3, #1
 8003520:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003524:	f383 8810 	msr	PRIMASK, r3
}
 8003528:	46c0      	nop			; (mov r8, r8)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	494e      	ldr	r1, [pc, #312]	; (8003670 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003536:	400a      	ands	r2, r1
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800353c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	f383 8810 	msr	PRIMASK, r3
}
 8003544:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003546:	f3ef 8310 	mrs	r3, PRIMASK
 800354a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800354c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354e:	643b      	str	r3, [r7, #64]	; 0x40
 8003550:	2301      	movs	r3, #1
 8003552:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003556:	f383 8810 	msr	PRIMASK, r3
}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2101      	movs	r1, #1
 8003568:	438a      	bics	r2, r1
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800356e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003572:	f383 8810 	msr	PRIMASK, r3
}
 8003576:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2288      	movs	r2, #136	; 0x88
 800357c:	2120      	movs	r1, #32
 800357e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	228c      	movs	r2, #140	; 0x8c
 8003584:	2120      	movs	r1, #32
 8003586:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2284      	movs	r2, #132	; 0x84
 800358c:	2100      	movs	r1, #0
 800358e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e069      	b.n	8003668 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2204      	movs	r2, #4
 800359c:	4013      	ands	r3, r2
 800359e:	d052      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	401a      	ands	r2, r3
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d148      	bne.n	8003646 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2280      	movs	r2, #128	; 0x80
 80035ba:	0112      	lsls	r2, r2, #4
 80035bc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035be:	f3ef 8310 	mrs	r3, PRIMASK
 80035c2:	613b      	str	r3, [r7, #16]
  return(result);
 80035c4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80035c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035c8:	2301      	movs	r3, #1
 80035ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f383 8810 	msr	PRIMASK, r3
}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4924      	ldr	r1, [pc, #144]	; (8003670 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80035e0:	400a      	ands	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f383 8810 	msr	PRIMASK, r3
}
 80035ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f0:	f3ef 8310 	mrs	r3, PRIMASK
 80035f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80035f6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80035fa:	2301      	movs	r3, #1
 80035fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	f383 8810 	msr	PRIMASK, r3
}
 8003604:	46c0      	nop			; (mov r8, r8)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2101      	movs	r1, #1
 8003612:	438a      	bics	r2, r1
 8003614:	609a      	str	r2, [r3, #8]
 8003616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	f383 8810 	msr	PRIMASK, r3
}
 8003620:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2288      	movs	r2, #136	; 0x88
 8003626:	2120      	movs	r1, #32
 8003628:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	228c      	movs	r2, #140	; 0x8c
 800362e:	2120      	movs	r1, #32
 8003630:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2290      	movs	r2, #144	; 0x90
 8003636:	2120      	movs	r1, #32
 8003638:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2284      	movs	r2, #132	; 0x84
 800363e:	2100      	movs	r1, #0
 8003640:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e010      	b.n	8003668 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	4013      	ands	r3, r2
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	425a      	negs	r2, r3
 8003656:	4153      	adcs	r3, r2
 8003658:	b2db      	uxtb	r3, r3
 800365a:	001a      	movs	r2, r3
 800365c:	1dfb      	adds	r3, r7, #7
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d100      	bne.n	8003666 <UART_WaitOnFlagUntilTimeout+0x182>
 8003664:	e747      	b.n	80034f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b014      	add	sp, #80	; 0x50
 800366e:	bd80      	pop	{r7, pc}
 8003670:	fffffe5f 	.word	0xfffffe5f

08003674 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b090      	sub	sp, #64	; 0x40
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	1dbb      	adds	r3, r7, #6
 8003680:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1dba      	adds	r2, r7, #6
 800368c:	215c      	movs	r1, #92	; 0x5c
 800368e:	8812      	ldrh	r2, [r2, #0]
 8003690:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2290      	movs	r2, #144	; 0x90
 8003696:	2100      	movs	r1, #0
 8003698:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	228c      	movs	r2, #140	; 0x8c
 800369e:	2122      	movs	r1, #34	; 0x22
 80036a0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2280      	movs	r2, #128	; 0x80
 80036a6:	589b      	ldr	r3, [r3, r2]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d02d      	beq.n	8003708 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2280      	movs	r2, #128	; 0x80
 80036b0:	589b      	ldr	r3, [r3, r2]
 80036b2:	4a40      	ldr	r2, [pc, #256]	; (80037b4 <UART_Start_Receive_DMA+0x140>)
 80036b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2280      	movs	r2, #128	; 0x80
 80036ba:	589b      	ldr	r3, [r3, r2]
 80036bc:	4a3e      	ldr	r2, [pc, #248]	; (80037b8 <UART_Start_Receive_DMA+0x144>)
 80036be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2280      	movs	r2, #128	; 0x80
 80036c4:	589b      	ldr	r3, [r3, r2]
 80036c6:	4a3d      	ldr	r2, [pc, #244]	; (80037bc <UART_Start_Receive_DMA+0x148>)
 80036c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2280      	movs	r2, #128	; 0x80
 80036ce:	589b      	ldr	r3, [r3, r2]
 80036d0:	2200      	movs	r2, #0
 80036d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	5898      	ldr	r0, [r3, r2]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3324      	adds	r3, #36	; 0x24
 80036e0:	0019      	movs	r1, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e6:	001a      	movs	r2, r3
 80036e8:	1dbb      	adds	r3, r7, #6
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	f7fd fcc6 	bl	800107c <HAL_DMA_Start_IT>
 80036f0:	1e03      	subs	r3, r0, #0
 80036f2:	d009      	beq.n	8003708 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2290      	movs	r2, #144	; 0x90
 80036f8:	2110      	movs	r1, #16
 80036fa:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	228c      	movs	r2, #140	; 0x8c
 8003700:	2120      	movs	r1, #32
 8003702:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e050      	b.n	80037aa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d019      	beq.n	8003744 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003710:	f3ef 8310 	mrs	r3, PRIMASK
 8003714:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800371a:	2301      	movs	r3, #1
 800371c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	f383 8810 	msr	PRIMASK, r3
}
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2180      	movs	r1, #128	; 0x80
 8003732:	0049      	lsls	r1, r1, #1
 8003734:	430a      	orrs	r2, r1
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	f383 8810 	msr	PRIMASK, r3
}
 8003742:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003744:	f3ef 8310 	mrs	r3, PRIMASK
 8003748:	613b      	str	r3, [r7, #16]
  return(result);
 800374a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800374c:	63bb      	str	r3, [r7, #56]	; 0x38
 800374e:	2301      	movs	r3, #1
 8003750:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f383 8810 	msr	PRIMASK, r3
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2101      	movs	r1, #1
 8003766:	430a      	orrs	r2, r1
 8003768:	609a      	str	r2, [r3, #8]
 800376a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f383 8810 	msr	PRIMASK, r3
}
 8003774:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003776:	f3ef 8310 	mrs	r3, PRIMASK
 800377a:	61fb      	str	r3, [r7, #28]
  return(result);
 800377c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800377e:	637b      	str	r3, [r7, #52]	; 0x34
 8003780:	2301      	movs	r3, #1
 8003782:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	f383 8810 	msr	PRIMASK, r3
}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2140      	movs	r1, #64	; 0x40
 8003798:	430a      	orrs	r2, r1
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	f383 8810 	msr	PRIMASK, r3
}
 80037a6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	0018      	movs	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b010      	add	sp, #64	; 0x40
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	0800390d 	.word	0x0800390d
 80037b8:	08003a3d 	.word	0x08003a3d
 80037bc:	08003a7f 	.word	0x08003a7f

080037c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	; 0x28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c8:	f3ef 8310 	mrs	r3, PRIMASK
 80037cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80037ce:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
 80037d2:	2301      	movs	r3, #1
 80037d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f383 8810 	msr	PRIMASK, r3
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	21c0      	movs	r1, #192	; 0xc0
 80037ea:	438a      	bics	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037fa:	f3ef 8310 	mrs	r3, PRIMASK
 80037fe:	617b      	str	r3, [r7, #20]
  return(result);
 8003800:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003802:	623b      	str	r3, [r7, #32]
 8003804:	2301      	movs	r3, #1
 8003806:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f383 8810 	msr	PRIMASK, r3
}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4908      	ldr	r1, [pc, #32]	; (800383c <UART_EndTxTransfer+0x7c>)
 800381c:	400a      	ands	r2, r1
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f383 8810 	msr	PRIMASK, r3
}
 800382a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2288      	movs	r2, #136	; 0x88
 8003830:	2120      	movs	r1, #32
 8003832:	5099      	str	r1, [r3, r2]
}
 8003834:	46c0      	nop			; (mov r8, r8)
 8003836:	46bd      	mov	sp, r7
 8003838:	b00a      	add	sp, #40	; 0x28
 800383a:	bd80      	pop	{r7, pc}
 800383c:	ff7fffff 	.word	0xff7fffff

08003840 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08e      	sub	sp, #56	; 0x38
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003848:	f3ef 8310 	mrs	r3, PRIMASK
 800384c:	617b      	str	r3, [r7, #20]
  return(result);
 800384e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003850:	637b      	str	r3, [r7, #52]	; 0x34
 8003852:	2301      	movs	r3, #1
 8003854:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f383 8810 	msr	PRIMASK, r3
}
 800385c:	46c0      	nop			; (mov r8, r8)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4926      	ldr	r1, [pc, #152]	; (8003904 <UART_EndRxTransfer+0xc4>)
 800386a:	400a      	ands	r2, r1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003870:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f383 8810 	msr	PRIMASK, r3
}
 8003878:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800387a:	f3ef 8310 	mrs	r3, PRIMASK
 800387e:	623b      	str	r3, [r7, #32]
  return(result);
 8003880:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003882:	633b      	str	r3, [r7, #48]	; 0x30
 8003884:	2301      	movs	r3, #1
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	f383 8810 	msr	PRIMASK, r3
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	491b      	ldr	r1, [pc, #108]	; (8003908 <UART_EndRxTransfer+0xc8>)
 800389c:	400a      	ands	r2, r1
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a6:	f383 8810 	msr	PRIMASK, r3
}
 80038aa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d118      	bne.n	80038e6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038b4:	f3ef 8310 	mrs	r3, PRIMASK
 80038b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80038ba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038be:	2301      	movs	r3, #1
 80038c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f383 8810 	msr	PRIMASK, r3
}
 80038c8:	46c0      	nop			; (mov r8, r8)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2110      	movs	r1, #16
 80038d6:	438a      	bics	r2, r1
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f383 8810 	msr	PRIMASK, r3
}
 80038e4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	228c      	movs	r2, #140	; 0x8c
 80038ea:	2120      	movs	r1, #32
 80038ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b00e      	add	sp, #56	; 0x38
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	fffffedf 	.word	0xfffffedf
 8003908:	effffffe 	.word	0xeffffffe

0800390c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b094      	sub	sp, #80	; 0x50
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2220      	movs	r2, #32
 8003922:	4013      	ands	r3, r2
 8003924:	d16f      	bne.n	8003a06 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003928:	225e      	movs	r2, #94	; 0x5e
 800392a:	2100      	movs	r1, #0
 800392c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800392e:	f3ef 8310 	mrs	r3, PRIMASK
 8003932:	61bb      	str	r3, [r7, #24]
  return(result);
 8003934:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003936:	64bb      	str	r3, [r7, #72]	; 0x48
 8003938:	2301      	movs	r3, #1
 800393a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f383 8810 	msr	PRIMASK, r3
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	493a      	ldr	r1, [pc, #232]	; (8003a38 <UART_DMAReceiveCplt+0x12c>)
 8003950:	400a      	ands	r2, r1
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003956:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	f383 8810 	msr	PRIMASK, r3
}
 800395e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003960:	f3ef 8310 	mrs	r3, PRIMASK
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003968:	647b      	str	r3, [r7, #68]	; 0x44
 800396a:	2301      	movs	r3, #1
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	f383 8810 	msr	PRIMASK, r3
}
 8003974:	46c0      	nop			; (mov r8, r8)
 8003976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2101      	movs	r1, #1
 8003982:	438a      	bics	r2, r1
 8003984:	609a      	str	r2, [r3, #8]
 8003986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398c:	f383 8810 	msr	PRIMASK, r3
}
 8003990:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003992:	f3ef 8310 	mrs	r3, PRIMASK
 8003996:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003998:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800399a:	643b      	str	r3, [r7, #64]	; 0x40
 800399c:	2301      	movs	r3, #1
 800399e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a2:	f383 8810 	msr	PRIMASK, r3
}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2140      	movs	r1, #64	; 0x40
 80039b4:	438a      	bics	r2, r1
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	f383 8810 	msr	PRIMASK, r3
}
 80039c2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c6:	228c      	movs	r2, #140	; 0x8c
 80039c8:	2120      	movs	r1, #32
 80039ca:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d118      	bne.n	8003a06 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d4:	f3ef 8310 	mrs	r3, PRIMASK
 80039d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80039da:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039de:	2301      	movs	r3, #1
 80039e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f383 8810 	msr	PRIMASK, r3
}
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2110      	movs	r1, #16
 80039f6:	438a      	bics	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f383 8810 	msr	PRIMASK, r3
}
 8003a04:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a08:	2200      	movs	r2, #0
 8003a0a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d108      	bne.n	8003a26 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a16:	225c      	movs	r2, #92	; 0x5c
 8003a18:	5a9a      	ldrh	r2, [r3, r2]
 8003a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a1c:	0011      	movs	r1, r2
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f7fc ff44 	bl	80008ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a24:	e003      	b.n	8003a2e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8003a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f7ff f9c9 	bl	8002dc0 <HAL_UART_RxCpltCallback>
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b014      	add	sp, #80	; 0x50
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	fffffeff 	.word	0xfffffeff

08003a3c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d10a      	bne.n	8003a6e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	225c      	movs	r2, #92	; 0x5c
 8003a5c:	5a9b      	ldrh	r3, [r3, r2]
 8003a5e:	085b      	lsrs	r3, r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	0011      	movs	r1, r2
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7fc ff20 	bl	80008ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a6c:	e003      	b.n	8003a76 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	0018      	movs	r0, r3
 8003a72:	f7ff f9ad 	bl	8002dd0 <HAL_UART_RxHalfCpltCallback>
}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b004      	add	sp, #16
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b086      	sub	sp, #24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2288      	movs	r2, #136	; 0x88
 8003a90:	589b      	ldr	r3, [r3, r2]
 8003a92:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	228c      	movs	r2, #140	; 0x8c
 8003a98:	589b      	ldr	r3, [r3, r2]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2280      	movs	r2, #128	; 0x80
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b80      	cmp	r3, #128	; 0x80
 8003aa8:	d10a      	bne.n	8003ac0 <UART_DMAError+0x42>
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b21      	cmp	r3, #33	; 0x21
 8003aae:	d107      	bne.n	8003ac0 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2256      	movs	r2, #86	; 0x56
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	0018      	movs	r0, r3
 8003abc:	f7ff fe80 	bl	80037c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2240      	movs	r2, #64	; 0x40
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b40      	cmp	r3, #64	; 0x40
 8003acc:	d10a      	bne.n	8003ae4 <UART_DMAError+0x66>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b22      	cmp	r3, #34	; 0x22
 8003ad2:	d107      	bne.n	8003ae4 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	225e      	movs	r2, #94	; 0x5e
 8003ad8:	2100      	movs	r1, #0
 8003ada:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f7ff feae 	bl	8003840 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2290      	movs	r2, #144	; 0x90
 8003ae8:	589b      	ldr	r3, [r3, r2]
 8003aea:	2210      	movs	r2, #16
 8003aec:	431a      	orrs	r2, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2190      	movs	r1, #144	; 0x90
 8003af2:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	0018      	movs	r0, r3
 8003af8:	f7ff f972 	bl	8002de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b006      	add	sp, #24
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	225e      	movs	r2, #94	; 0x5e
 8003b16:	2100      	movs	r1, #0
 8003b18:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2256      	movs	r2, #86	; 0x56
 8003b1e:	2100      	movs	r1, #0
 8003b20:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	0018      	movs	r0, r3
 8003b26:	f7ff f95b 	bl	8002de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b004      	add	sp, #16
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b086      	sub	sp, #24
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b40:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	2301      	movs	r3, #1
 8003b46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f383 8810 	msr	PRIMASK, r3
}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2140      	movs	r1, #64	; 0x40
 8003b5c:	438a      	bics	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f383 8810 	msr	PRIMASK, r3
}
 8003b6a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2288      	movs	r2, #136	; 0x88
 8003b70:	2120      	movs	r1, #32
 8003b72:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f7ff f917 	bl	8002db0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b006      	add	sp, #24
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b002      	add	sp, #8
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b002      	add	sp, #8
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b082      	sub	sp, #8
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b002      	add	sp, #8
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2284      	movs	r2, #132	; 0x84
 8003bc8:	5c9b      	ldrb	r3, [r3, r2]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_UARTEx_DisableFifoMode+0x16>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e027      	b.n	8003c22 <HAL_UARTEx_DisableFifoMode+0x66>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2284      	movs	r2, #132	; 0x84
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2288      	movs	r2, #136	; 0x88
 8003bde:	2124      	movs	r1, #36	; 0x24
 8003be0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	438a      	bics	r2, r1
 8003bf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4a0b      	ldr	r2, [pc, #44]	; (8003c2c <HAL_UARTEx_DisableFifoMode+0x70>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2288      	movs	r2, #136	; 0x88
 8003c14:	2120      	movs	r1, #32
 8003c16:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2284      	movs	r2, #132	; 0x84
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	0018      	movs	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b004      	add	sp, #16
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	dfffffff 	.word	0xdfffffff

08003c30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2284      	movs	r2, #132	; 0x84
 8003c3e:	5c9b      	ldrb	r3, [r3, r2]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e02e      	b.n	8003ca6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2284      	movs	r2, #132	; 0x84
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2288      	movs	r2, #136	; 0x88
 8003c54:	2124      	movs	r1, #36	; 0x24
 8003c56:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	438a      	bics	r2, r1
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	08d9      	lsrs	r1, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	0018      	movs	r0, r3
 8003c88:	f000 f8bc 	bl	8003e04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2288      	movs	r2, #136	; 0x88
 8003c98:	2120      	movs	r1, #32
 8003c9a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2284      	movs	r2, #132	; 0x84
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b004      	add	sp, #16
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2284      	movs	r2, #132	; 0x84
 8003cbe:	5c9b      	ldrb	r3, [r3, r2]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e02f      	b.n	8003d28 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2284      	movs	r2, #132	; 0x84
 8003ccc:	2101      	movs	r1, #1
 8003cce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2288      	movs	r2, #136	; 0x88
 8003cd4:	2124      	movs	r1, #36	; 0x24
 8003cd6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2101      	movs	r1, #1
 8003cec:	438a      	bics	r2, r1
 8003cee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	4a0e      	ldr	r2, [pc, #56]	; (8003d30 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	0019      	movs	r1, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f000 f87b 	bl	8003e04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2288      	movs	r2, #136	; 0x88
 8003d1a:	2120      	movs	r1, #32
 8003d1c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2284      	movs	r2, #132	; 0x84
 8003d22:	2100      	movs	r1, #0
 8003d24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	0018      	movs	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b004      	add	sp, #16
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	f1ffffff 	.word	0xf1ffffff

08003d34 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d34:	b5b0      	push	{r4, r5, r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	1dbb      	adds	r3, r7, #6
 8003d40:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	228c      	movs	r2, #140	; 0x8c
 8003d46:	589b      	ldr	r3, [r3, r2]
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d156      	bne.n	8003dfa <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003d52:	1dbb      	adds	r3, r7, #6
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e04e      	b.n	8003dfc <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	2380      	movs	r3, #128	; 0x80
 8003d64:	015b      	lsls	r3, r3, #5
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d109      	bne.n	8003d7e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d105      	bne.n	8003d7e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2201      	movs	r2, #1
 8003d76:	4013      	ands	r3, r2
 8003d78:	d001      	beq.n	8003d7e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e03e      	b.n	8003dfc <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003d8a:	2527      	movs	r5, #39	; 0x27
 8003d8c:	197c      	adds	r4, r7, r5
 8003d8e:	1dbb      	adds	r3, r7, #6
 8003d90:	881a      	ldrh	r2, [r3, #0]
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	0018      	movs	r0, r3
 8003d98:	f7ff fc6c 	bl	8003674 <UART_Start_Receive_DMA>
 8003d9c:	0003      	movs	r3, r0
 8003d9e:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003da0:	197b      	adds	r3, r7, r5
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d124      	bne.n	8003df2 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d11c      	bne.n	8003dea <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2210      	movs	r2, #16
 8003db6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dbc:	617b      	str	r3, [r7, #20]
  return(result);
 8003dbe:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc0:	623b      	str	r3, [r7, #32]
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f383 8810 	msr	PRIMASK, r3
}
 8003dcc:	46c0      	nop			; (mov r8, r8)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2110      	movs	r1, #16
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	f383 8810 	msr	PRIMASK, r3
}
 8003de8:	e003      	b.n	8003df2 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003dea:	2327      	movs	r3, #39	; 0x27
 8003dec:	18fb      	adds	r3, r7, r3
 8003dee:	2201      	movs	r2, #1
 8003df0:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8003df2:	2327      	movs	r3, #39	; 0x27
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	e000      	b.n	8003dfc <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
  }
}
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b00a      	add	sp, #40	; 0x28
 8003e02:	bdb0      	pop	{r4, r5, r7, pc}

08003e04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d108      	bne.n	8003e26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	226a      	movs	r2, #106	; 0x6a
 8003e18:	2101      	movs	r1, #1
 8003e1a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2268      	movs	r2, #104	; 0x68
 8003e20:	2101      	movs	r1, #1
 8003e22:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e24:	e043      	b.n	8003eae <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e26:	260f      	movs	r6, #15
 8003e28:	19bb      	adds	r3, r7, r6
 8003e2a:	2208      	movs	r2, #8
 8003e2c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e2e:	200e      	movs	r0, #14
 8003e30:	183b      	adds	r3, r7, r0
 8003e32:	2208      	movs	r2, #8
 8003e34:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	0e5b      	lsrs	r3, r3, #25
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	240d      	movs	r4, #13
 8003e42:	193b      	adds	r3, r7, r4
 8003e44:	2107      	movs	r1, #7
 8003e46:	400a      	ands	r2, r1
 8003e48:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	0f5b      	lsrs	r3, r3, #29
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	250c      	movs	r5, #12
 8003e56:	197b      	adds	r3, r7, r5
 8003e58:	2107      	movs	r1, #7
 8003e5a:	400a      	ands	r2, r1
 8003e5c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e5e:	183b      	adds	r3, r7, r0
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	197a      	adds	r2, r7, r5
 8003e64:	7812      	ldrb	r2, [r2, #0]
 8003e66:	4914      	ldr	r1, [pc, #80]	; (8003eb8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003e68:	5c8a      	ldrb	r2, [r1, r2]
 8003e6a:	435a      	muls	r2, r3
 8003e6c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003e6e:	197b      	adds	r3, r7, r5
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	4a12      	ldr	r2, [pc, #72]	; (8003ebc <UARTEx_SetNbDataToProcess+0xb8>)
 8003e74:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e76:	0019      	movs	r1, r3
 8003e78:	f7fc f9d6 	bl	8000228 <__divsi3>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	b299      	uxth	r1, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	226a      	movs	r2, #106	; 0x6a
 8003e84:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e86:	19bb      	adds	r3, r7, r6
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	193a      	adds	r2, r7, r4
 8003e8c:	7812      	ldrb	r2, [r2, #0]
 8003e8e:	490a      	ldr	r1, [pc, #40]	; (8003eb8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003e90:	5c8a      	ldrb	r2, [r1, r2]
 8003e92:	435a      	muls	r2, r3
 8003e94:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e96:	193b      	adds	r3, r7, r4
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	4a08      	ldr	r2, [pc, #32]	; (8003ebc <UARTEx_SetNbDataToProcess+0xb8>)
 8003e9c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	f7fc f9c2 	bl	8000228 <__divsi3>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	b299      	uxth	r1, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2268      	movs	r2, #104	; 0x68
 8003eac:	5299      	strh	r1, [r3, r2]
}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b005      	add	sp, #20
 8003eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	08003fa8 	.word	0x08003fa8
 8003ebc:	08003fb0 	.word	0x08003fb0

08003ec0 <__libc_init_array>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	2600      	movs	r6, #0
 8003ec4:	4d0c      	ldr	r5, [pc, #48]	; (8003ef8 <__libc_init_array+0x38>)
 8003ec6:	4c0d      	ldr	r4, [pc, #52]	; (8003efc <__libc_init_array+0x3c>)
 8003ec8:	1b64      	subs	r4, r4, r5
 8003eca:	10a4      	asrs	r4, r4, #2
 8003ecc:	42a6      	cmp	r6, r4
 8003ece:	d109      	bne.n	8003ee4 <__libc_init_array+0x24>
 8003ed0:	2600      	movs	r6, #0
 8003ed2:	f000 f821 	bl	8003f18 <_init>
 8003ed6:	4d0a      	ldr	r5, [pc, #40]	; (8003f00 <__libc_init_array+0x40>)
 8003ed8:	4c0a      	ldr	r4, [pc, #40]	; (8003f04 <__libc_init_array+0x44>)
 8003eda:	1b64      	subs	r4, r4, r5
 8003edc:	10a4      	asrs	r4, r4, #2
 8003ede:	42a6      	cmp	r6, r4
 8003ee0:	d105      	bne.n	8003eee <__libc_init_array+0x2e>
 8003ee2:	bd70      	pop	{r4, r5, r6, pc}
 8003ee4:	00b3      	lsls	r3, r6, #2
 8003ee6:	58eb      	ldr	r3, [r5, r3]
 8003ee8:	4798      	blx	r3
 8003eea:	3601      	adds	r6, #1
 8003eec:	e7ee      	b.n	8003ecc <__libc_init_array+0xc>
 8003eee:	00b3      	lsls	r3, r6, #2
 8003ef0:	58eb      	ldr	r3, [r5, r3]
 8003ef2:	4798      	blx	r3
 8003ef4:	3601      	adds	r6, #1
 8003ef6:	e7f2      	b.n	8003ede <__libc_init_array+0x1e>
 8003ef8:	08003fc0 	.word	0x08003fc0
 8003efc:	08003fc0 	.word	0x08003fc0
 8003f00:	08003fc0 	.word	0x08003fc0
 8003f04:	08003fc4 	.word	0x08003fc4

08003f08 <memset>:
 8003f08:	0003      	movs	r3, r0
 8003f0a:	1882      	adds	r2, r0, r2
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <memset+0xa>
 8003f10:	4770      	bx	lr
 8003f12:	7019      	strb	r1, [r3, #0]
 8003f14:	3301      	adds	r3, #1
 8003f16:	e7f9      	b.n	8003f0c <memset+0x4>

08003f18 <_init>:
 8003f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1e:	bc08      	pop	{r3}
 8003f20:	469e      	mov	lr, r3
 8003f22:	4770      	bx	lr

08003f24 <_fini>:
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	469e      	mov	lr, r3
 8003f2e:	4770      	bx	lr
